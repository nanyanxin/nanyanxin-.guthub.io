<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/09/08/LeetCode_day1/"/>
    <url>/2021/09/08/LeetCode_day1/</url>
    
    <content type="html"><![CDATA[<p>刷leetcode第一天</p><hr><p>1.两数相加（simple）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>&#125;;<br>        <span class="hljs-keyword">int</span> target = <span class="hljs-number">9</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        <span class="hljs-keyword">int</span> indexs[] = solution.twoSum(nums,target);<br>        System.out.println(<span class="hljs-string">&quot;[&quot;</span>+indexs[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;,&quot;</span>+indexs[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：</span><br><span class="hljs-comment">     * 1.采用Hashmap，key存数组元素，value存数组元素对应下标</span><br><span class="hljs-comment">     * 2.遍历给定数组，判断哈希表键的集合中是否包含target-nums[i]，即hs.containsKey(target-nums[i])</span><br><span class="hljs-comment">     * 3.如果为false，说明没找到两数相加得目标值target的数组元素，则将该遍历到的数组元素加入哈希表中</span><br><span class="hljs-comment">     * 4.如果为true，说明找到了，即遍历到的数组元素a[i]和目标值target-a[i]（在哈希表中），将对应的数组下标取出即可。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>            HashMap&lt;Integer, Integer&gt; hs = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> index[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt; nums.length;i++)&#123;<br>                <span class="hljs-keyword">if</span> (hs.containsKey(target-nums[i]))&#123;<br>                    index[<span class="hljs-number">0</span>] = hs.get(target-nums[i]);<br>                    index[<span class="hljs-number">1</span>] = i;<br>                    <span class="hljs-keyword">return</span> index;<br>                &#125;<br>                hs.put(nums[i],i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.链表中两数相加（middle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m001</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br><br>        ListNode() &#123;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode n1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        ListNode n2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        n1.next = n2;<br>        n2.next = n3;<br><br>        ListNode n4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n5 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        n4.next = n5;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode l = solution.twoSum(n1, n4);<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (l.next != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.print(l.val + <span class="hljs-string">&quot;,&quot;</span>);<br>            l = l.next;<br>        &#125;<br>        System.out.println(l.val + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思路：</span><br><span class="hljs-comment">     * 任意某一链表不为空时，两数相加得sumVal</span><br><span class="hljs-comment">     * remainder表示余数，rem=sumVal%10，表示两个位数相加，个位数存入链表</span><br><span class="hljs-comment">     * carry表示进位，car=sumVal/10，说明有进位，加入后续</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">twoSum</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>            ListNode root = <span class="hljs-keyword">new</span> ListNode();     <span class="hljs-comment">//结果链表头结点</span><br>            ListNode curse = root;  <span class="hljs-comment">//游标</span><br>            <span class="hljs-keyword">int</span> sumVal;<br>            <span class="hljs-keyword">int</span> rem;<br>            <span class="hljs-keyword">int</span> car = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span> || car != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">int</span> l1val = l1 != <span class="hljs-keyword">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">int</span> l2val = l2 != <span class="hljs-keyword">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>                sumVal = l1val + l2val + car;<br>                rem = sumVal % <span class="hljs-number">10</span>;<br>                car = sumVal / <span class="hljs-number">10</span>;<br>                ListNode remNode = <span class="hljs-keyword">new</span> ListNode(rem);<br>                curse.next = remNode;<br>                curse = remNode;<br><br>                <span class="hljs-keyword">if</span> (l1!= <span class="hljs-keyword">null</span>) l1 = l1.next;<br>                <span class="hljs-keyword">if</span> (l2!= <span class="hljs-keyword">null</span>) l2 = l2.next;    <span class="hljs-comment">//必须加判断，因为如果当前l2为空，l1不为空，进入下一次循环时，由于上一步l2已经为空，如果不加判断，正常走l2还要后移，则一定报错。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> root.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.计算字符串中最大无重复子字符串长度（middle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m002</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcab&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.lengthOfLongestSubstring(s));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想1：</span><br><span class="hljs-comment">     * 1.用index表示开始遍历的字符串字符元素下标，从头遍历，将得到的字符加入HashSet。</span><br><span class="hljs-comment">     * 2.当出现集合中的字符时，记录不同字符数，然后将集合清空，将index+1，再开始遍历。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="hljs-comment">//            HashSet&lt;Character&gt; hs = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">////            char[] cs = s.toCharArray();</span><br><span class="hljs-comment">//            int index = 0;  //记录开始遍历的数组元素下标</span><br><span class="hljs-comment">//            int count = 0;  //无重复字母字符串计数器</span><br><span class="hljs-comment">//            int maxCount = 0;   //记录最大count值</span><br><span class="hljs-comment">//            while (index &lt; s.length()+1)&#123;</span><br><span class="hljs-comment">//                for (int i = index; i &lt; s.length(); i++) &#123;   //遍历字符串</span><br><span class="hljs-comment">//                    if (hs.contains(s.charAt(i))) &#123;</span><br><span class="hljs-comment">//                        count = 0;</span><br><span class="hljs-comment">//                        hs.clear();</span><br><span class="hljs-comment">//                        break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    hs.add(s.charAt(i));</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                    if (count &gt; maxCount) &#123;</span><br><span class="hljs-comment">//                        maxCount = count;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                index++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return maxCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想2：滑动窗口</span><br><span class="hljs-comment">     * 1.用hashmap存放字符及对应下标</span><br><span class="hljs-comment">     * 2.left表示左指针，即指向无重复字符串的首位，for循环遍历字符串，i表示无重复字符串的末位</span><br><span class="hljs-comment">     * 3.hashmap中若不包含当前遍历到字符，则加入hashmap中，继续遍历</span><br><span class="hljs-comment">     * 若包含当前遍历到的字符，则left移动到hashmap中该字符对应的下标位置，并将hashmap中该字符的对应下标替换成当前遍历到的字符的下标hm.put(s.charAt(i),i)，</span><br><span class="hljs-comment">     * 然后继续遍历字符串直到结束。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span></span>&#123;<br>            HashMap&lt;Character, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (hm.containsKey(s.charAt(i)))&#123;<br>                    left = Math.max(left,hm.get(s.charAt(i))+<span class="hljs-number">1</span>);<br>                &#125;<br>                hm.put(s.charAt(i),i);<span class="hljs-comment">//hashmap.put()方法，遇到相同的key时，会替换value</span><br>                max = Math.max(max,i-left+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
