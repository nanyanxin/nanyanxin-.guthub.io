<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2021/09/14/%E5%9B%BE/"/>
    <url>/2021/09/14/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>堆</title>
    <link href="/2021/09/14/%E5%A0%86/"/>
    <url>/2021/09/14/%E5%A0%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯</title>
    <link href="/2021/09/14/%E5%9B%9E%E6%BA%AF/"/>
    <url>/2021/09/14/%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2021/09/14/%E9%80%92%E5%BD%92/"/>
    <url>/2021/09/14/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2021/09/14/%E6%A0%91/"/>
    <url>/2021/09/14/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2021/09/14/%E9%98%9F%E5%88%97/"/>
    <url>/2021/09/14/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>jianzhi_042.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_042</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最近请求次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        RecentCounter recentCounter = <span class="hljs-keyword">new</span> RecentCounter();<br>        recentCounter.queue.add(<span class="hljs-number">1</span>);<br>        recentCounter.queue.add(<span class="hljs-number">3</span>);<br>        recentCounter.queue.add(<span class="hljs-number">100</span>);<br>        recentCounter.queue.add(<span class="hljs-number">3002</span>);<br>        System.out.println(recentCounter.ping(<span class="hljs-number">3003</span>));<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：所有元素都加入队列，ping到t时，从队首元素x开始检查是否在[x-t,t]范围内，不在就删除，直到找到第一个在的停止。返回此时的队列大小即可。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecentCounter</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RecentCounter</span><span class="hljs-params">()</span> </span>&#123;<br>            queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ping</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>            queue.add(t);      <span class="hljs-comment">//向队列添加元素</span><br>            <span class="hljs-comment">//当元素小于t-3000的话就表示该元素不在3000毫秒以内</span><br>            <span class="hljs-keyword">while</span> (queue.peek() &lt; t-<span class="hljs-number">3000</span>)&#123;  <span class="hljs-comment">//queue.peek()检索队首元素，但不删除</span><br>                queue.poll();   <span class="hljs-comment">//检索队首元素并删除。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> queue.size();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi_041.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> javax.security.auth.login.CredentialNotFoundException;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_041</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 滑动窗口的平均值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MovingAverage movingAverage = <span class="hljs-keyword">new</span> MovingAverage(<span class="hljs-number">3</span>);<br><br>        System.out.println(movingAverage.next(<span class="hljs-number">1</span>));<br>        System.out.println(movingAverage.next(<span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovingAverage</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">/** Initialize your data structure here. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MovingAverage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>            len = size;<br>            queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (queue.size() != len) &#123;<br>                sum = sum + val;<br>                queue.add(val);<br>                <span class="hljs-keyword">return</span> sum / queue.size();<br>            &#125;<br>            sum = sum-queue.poll()+val;<br>            queue.add(val);<br>            <span class="hljs-keyword">return</span> (sum / queue.size());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>m_950.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.queue;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_950</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按递增顺序显示卡牌</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">17</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.deckRevealedIncreasing(arr)));<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：将模拟过程倒叙思考</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] deckRevealedIncreasing(<span class="hljs-keyword">int</span>[] deck) &#123;<br>            Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>            Arrays.sort(deck);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = deck.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>                <span class="hljs-keyword">if</span> (queue.isEmpty())&#123;<br>                    queue.add(deck[i]);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                queue.add(queue.poll());<br>                queue.add(deck[i]);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = deck.length-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>                deck[j] = queue.poll();<br>            &#125;<br>            <span class="hljs-keyword">return</span> deck;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2021/09/14/%E6%A0%88/"/>
    <url>/2021/09/14/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2021/09/14/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2021/09/14/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2021/09/14/%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/09/14/%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2021/09/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2021/09/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2021/09/14/%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/09/14/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<hr><p>002.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_002</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 两数相加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br><br>        ListNode() &#123;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode n1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        ListNode n2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        n1.next = n2;<br>        n2.next = n3;<br><br>        ListNode n4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n5 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        n4.next = n5;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode l = solution.twoSum(n1, n4);<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (l.next != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.print(l.val + <span class="hljs-string">&quot;,&quot;</span>);<br>            l = l.next;<br>        &#125;<br>        System.out.println(l.val + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思路：</span><br><span class="hljs-comment">     * 任意某一链表不为空时，两数相加得sumVal</span><br><span class="hljs-comment">     * remainder表示余数，rem=sumVal%10，表示两个位数相加，个位数存入链表</span><br><span class="hljs-comment">     * carry表示进位，car=sumVal/10，说明有进位，加入后续</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">twoSum</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>            ListNode root = <span class="hljs-keyword">new</span> ListNode();     <span class="hljs-comment">//结果链表头结点</span><br>            ListNode curse = root;  <span class="hljs-comment">//游标</span><br>            <span class="hljs-keyword">int</span> sumVal;<br>            <span class="hljs-keyword">int</span> rem;<br>            <span class="hljs-keyword">int</span> car = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span> || car != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">int</span> l1val = l1 != <span class="hljs-keyword">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">int</span> l2val = l2 != <span class="hljs-keyword">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>                sumVal = l1val + l2val + car;<br>                rem = sumVal % <span class="hljs-number">10</span>;<br>                car = sumVal / <span class="hljs-number">10</span>;<br>                ListNode remNode = <span class="hljs-keyword">new</span> ListNode(rem);<br>                curse.next = remNode;<br>                curse = remNode;<br><br>                <span class="hljs-keyword">if</span> (l1!= <span class="hljs-keyword">null</span>) l1 = l1.next;<br>                <span class="hljs-keyword">if</span> (l2!= <span class="hljs-keyword">null</span>) l2 = l2.next;    <span class="hljs-comment">//必须加判断，因为如果当前l2为空，l1不为空，进入下一次循环时，由于上一步l2已经为空，如果不加判断，正常走l2还要后移，则一定报错。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> root.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>019.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_19</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除链表的倒数第 N 个结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>);<br>        ListNode l4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        l1.next = l2;<br>        l2.next = l3;<br>        l3.next = l4;<br><br><span class="hljs-comment">//        Solution solution = new Solution();</span><br><span class="hljs-comment">//        solution.removeNthFromEnd(l1,2);</span><br><br>        Solution2 solution2 = <span class="hljs-keyword">new</span> Solution2();<br>        solution2.removeNthFromEnd(l1,<span class="hljs-number">2</span>);<br><br>        ListNode head = l1;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(head.val);<br>            head = head.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：1)如果删除的是头节点，则head=head.next,return head</span><br><span class="hljs-comment">     *      2)其他情况，找到第k-n个节点node，node.next = node.next.next</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            <span class="hljs-comment">//求链表长度</span><br>            <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>            ListNode temp1 = head;<br>            <span class="hljs-keyword">while</span> (temp1 != <span class="hljs-keyword">null</span>)&#123;<br>                temp1 = temp1.next;<br>                len++;<br>            &#125;<br>            <span class="hljs-comment">//删除头节点</span><br>            <span class="hljs-keyword">if</span>(len == n)&#123;<br>                head = head.next;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-comment">//找第k-n个节点</span><br>            ListNode temp2 = head;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (count != len-n)&#123;<br>                temp2 = temp2.next;<br>                count++;<br>            &#125;<br>            temp2.next = temp2.next.next;<br><br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想2：进阶，扫描一次，用两个指针，一个先走n下，然后两个一起走</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            ListNode q = head;<br>            ListNode p = head;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//快指针先走n步</span><br>            <span class="hljs-keyword">while</span> (count != n)&#123;<br>                q = q.next;<br>                count++;<br>            &#125;<br>            <span class="hljs-comment">//如果删除的是头节点</span><br>            <span class="hljs-keyword">if</span> (q == <span class="hljs-keyword">null</span>)&#123;<br>                head = head.next;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-comment">//快慢指针一起走</span><br>            <span class="hljs-keyword">while</span> (q.next!= <span class="hljs-keyword">null</span>)&#123;<br>                q = q.next;<br>                p = p.next;<br>            &#125;<br>            <span class="hljs-comment">//删除待删节点</span><br>            p.next = p.next.next;<br><br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>0203.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_0203</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除中间节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>);<br>        ListNode l4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        l1.next = l2;<br>        l2.next = l3;<br>        l3.next = l4;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        solution.deleteNode(l2);<br>        ListNode head = l1;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(head.val);<br>            head = head.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想:将要删除的这个节点node变成下一个节点，然后node.next = node.next.next</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode node)</span> </span>&#123;<br>            node.val = node.next.val;<br>            node.next = node.next.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi25.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> midle.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> jianzhi25 &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并两个有序链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>);<br>        ListNode l4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        l1.<span class="hljs-keyword">next</span> = l2;<br>        l3.<span class="hljs-keyword">next</span> = l4;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode h = solution.mergeTwoLists(l1,l3);<br>        <span class="hljs-keyword">while</span> (h!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(h.val);<br>            h=h.<span class="hljs-keyword">next</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> ListNode &#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode <span class="hljs-keyword">next</span>;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode <span class="hljs-keyword">next</span>) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">next</span>; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：将两个链表合并到一个新链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> Solution &#123;<br>        <span class="hljs-keyword">public</span> ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;<br>            <span class="hljs-keyword">if</span> (l1 == <span class="hljs-keyword">null</span> &amp;&amp; l2 == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            ListNode ne = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>            ListNode head = ne;<br><span class="hljs-comment">//            ListNode p = l1;</span><br><span class="hljs-comment">//            ListNode q = l2;</span><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> &amp;&amp; l2 != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (l1.val &lt; l2.val)&#123;<br>                    ne.<span class="hljs-keyword">next</span> = l1;<br>                    l1 = l1.<span class="hljs-keyword">next</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    ne.<span class="hljs-keyword">next</span> = l2;<br>                    l2 = l2.<span class="hljs-keyword">next</span>;<br>                &#125;<br>                ne = ne.<span class="hljs-keyword">next</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l1 == <span class="hljs-keyword">null</span>)&#123;<br>                ne.<span class="hljs-keyword">next</span> = l2;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l2 == <span class="hljs-keyword">null</span>)&#123;<br>                ne.<span class="hljs-keyword">next</span> = l1;<br>            &#125;<br>            <span class="hljs-keyword">return</span> head.<span class="hljs-keyword">next</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1669.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 思想：list1,定义两个指针p,q，负责找到删除部分的尾和头，</span><br><span class="hljs-comment">  * list2，定义两个指针m,n，m指向头，n指向尾</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> ListNode mergeInBetween(ListNode list1, <span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b, ListNode list2) &#123;<br>         <span class="hljs-comment">//定义两个指针m,n，m指向list2头，n指向list2尾</span><br>         ListNode m = list2;<br>         ListNode n = m;<br>         <span class="hljs-keyword">while</span> (n.<span class="hljs-keyword">next</span> != <span class="hljs-literal">null</span>)&#123;<br>             n = n.<span class="hljs-keyword">next</span>;<br>         &#125;<br>         <span class="hljs-comment">//定义两个指针p,q，负责找到list1删除部分的尾和头</span><br>         ListNode p = list1;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i&lt;a<span class="hljs-number">-1</span>;i++)&#123;<br>             p = p.<span class="hljs-keyword">next</span>;<br>         &#125;<br>         ListNode q = p;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>;j&lt;b-a+<span class="hljs-number">2</span>;j++)&#123;<br>             q = q.<span class="hljs-keyword">next</span>;<br>         &#125;<br>         p.<span class="hljs-keyword">next</span> = m;<br>         n.<span class="hljs-keyword">next</span> = q;<br><br>         <span class="hljs-keyword">return</span> list1;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>1290.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思想：先求出链表长度，再从头遍历，sum = sum + node.val * 2^[节点下标]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> getDecimalValue(ListNode head) &#123;<br>        ListNode p = head;<br>        ListNode q = p;<br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//求链表长度</span><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">count</span>++;<br>            p = p.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-comment">//转换成二进制</span><br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (q != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (q.val != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">sum</span> = <span class="hljs-keyword">sum</span> + (<span class="hljs-built_in">int</span>)Math.pow(<span class="hljs-number">2</span>,<span class="hljs-keyword">count</span><span class="hljs-number">-1</span>);<br>            &#125;<br>            q = q.<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">count</span>--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">sum</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi22.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi22</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 链表中倒数第k个节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">2</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">3</span>);<br>        l1.next=l2;<br>        l2.next=l3;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode k = solution.getKthFromEnd(l1,<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">while</span> (k!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(k.val);<br>            k = k.next;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> val;<br>      ListNode next;<br>      ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：定义两个指针p,q，p先走k下，然后p和q一起走直到p.next==null，则q.next就是要找的倒数第k个链表节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            ListNode p = head;<br>            ListNode q = p;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;k-<span class="hljs-number">1</span>;i++)&#123;<br>                p = p.next;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (p.next!=<span class="hljs-keyword">null</span>)&#123;<br>                p = p.next;<br>                q = q.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> q;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi06.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思想：定义两个指针，h指向头结点，t指向链表尾部节点，使用尾插法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        ListNode h = head;<br>        ListNode t = h;<br><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;    <span class="hljs-comment">//链表长度</span><br>        <span class="hljs-keyword">while</span> (t != <span class="hljs-keyword">null</span>)&#123;<br>            t = t.next;<br>            len++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> res[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br><br>        <span class="hljs-keyword">while</span> (h != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= len-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>                res[i] = h.val;<br>                h = h.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2021/09/14/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2021/09/14/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<hr><p>1689.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1689</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 十-二进制数的最少数目</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String n = <span class="hljs-string">&quot;13654987&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.minPartitions(n));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：找出字符串中，最大ASCLL码的字符，转换成十进制</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minPartitions</span><span class="hljs-params">(String n)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> ((n.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>)&gt;res)&#123;<br>                    res = n.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑指offer-58.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_58</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 左旋转字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.reverseLeftWords(s,k));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：截取字符串s，然后进行拼接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseLeftWords</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            String str = <span class="hljs-string">&quot;&quot;</span>;<br>            str = s.substring(n)+s.substring(<span class="hljs-number">0</span>,n);<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑指offer-85.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.string;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_085</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成匹配的括号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">2</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.generateParenthesis(n));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：深度优先遍历</span><br><span class="hljs-comment">     * 剪枝条件为：左括号个数大于n，右括号个数小于左括号个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            List&lt;String&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>            dfs(n,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,res);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> open,<span class="hljs-keyword">int</span> close,String path,List res)</span></span>&#123;<br><span class="hljs-comment">//            if (open&gt;n || close&gt;open) return;</span><br><span class="hljs-comment">//            if (path.length() == 2*n)&#123;</span><br><span class="hljs-comment">//                res.add(path);</span><br><span class="hljs-comment">//                return;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            dfs(n,open+1,close,path+&quot;(&quot;,res);</span><br><span class="hljs-comment">//            dfs(n,open,close+1,path+&quot;)&quot;,res);</span><br><br>            <span class="hljs-keyword">if</span> (path.length() == <span class="hljs-number">2</span>*n)&#123;<br>                res.add(path);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (open&lt;n)<br>            dfs(n,open+<span class="hljs-number">1</span>,close,path+<span class="hljs-string">&quot;(&quot;</span>,res);<br>            <span class="hljs-keyword">if</span> (close&lt;open)<br>            dfs(n,open,close+<span class="hljs-number">1</span>,path+<span class="hljs-string">&quot;)&quot;</span>,res);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>003.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.string;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_003</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcab&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.lengthOfLongestSubstring(s));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想1：</span><br><span class="hljs-comment">     * 1.用index表示开始遍历的字符串字符元素下标，从头遍历，将得到的字符加入HashSet。</span><br><span class="hljs-comment">     * 2.当出现集合中的字符时，记录不同字符数，然后将集合清空，将index+1，再开始遍历。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="hljs-comment">//            HashSet&lt;Character&gt; hs = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">////            char[] cs = s.toCharArray();</span><br><span class="hljs-comment">//            int index = 0;  //记录开始遍历的数组元素下标</span><br><span class="hljs-comment">//            int count = 0;  //无重复字母字符串计数器</span><br><span class="hljs-comment">//            int maxCount = 0;   //记录最大count值</span><br><span class="hljs-comment">//            while (index &lt; s.length()+1)&#123;</span><br><span class="hljs-comment">//                for (int i = index; i &lt; s.length(); i++) &#123;   //遍历字符串</span><br><span class="hljs-comment">//                    if (hs.contains(s.charAt(i))) &#123;</span><br><span class="hljs-comment">//                        count = 0;</span><br><span class="hljs-comment">//                        hs.clear();</span><br><span class="hljs-comment">//                        break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    hs.add(s.charAt(i));</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                    if (count &gt; maxCount) &#123;</span><br><span class="hljs-comment">//                        maxCount = count;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                index++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return maxCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想2：滑动窗口</span><br><span class="hljs-comment">     * 1.用hashmap存放字符及对应下标</span><br><span class="hljs-comment">     * 2.left表示左指针，即指向无重复字符串的首位，for循环遍历字符串，i表示无重复字符串的末位</span><br><span class="hljs-comment">     * 3.hashmap中若不包含当前遍历到字符，则加入hashmap中，继续遍历</span><br><span class="hljs-comment">     * 若包含当前遍历到的字符，则left移动到hashmap中该字符对应的下标位置，并将hashmap中该字符的对应下标替换成当前遍历到的字符的下标hm.put(s.charAt(i),i)，</span><br><span class="hljs-comment">     * 然后继续遍历字符串直到结束。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span></span>&#123;<br>            HashMap&lt;Character, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (hm.containsKey(s.charAt(i)))&#123;<br>                    left = Math.max(left,hm.get(s.charAt(i))+<span class="hljs-number">1</span>);<br>                &#125;<br>                hm.put(s.charAt(i),i);  <span class="hljs-comment">//hashmap.put()方法，遇到相同的key时，会替换value</span><br>                max = Math.max(max,i-left+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1108.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.string;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1108</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IP地址无效化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String address = <span class="hljs-string">&quot;255.100.50.0&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        String ip = solution.defangIPaddr(address);<br>        System.out.println(ip);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public String defangIPaddr(String address) &#123;</span><br><span class="hljs-comment">//            String ip = &quot;&quot;;</span><br><span class="hljs-comment">//            String subip[] = address.split(&quot;\\.&quot;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            for (int i =0;i&lt;subip.length-1;i++)&#123;</span><br><span class="hljs-comment">//                ip+=subip[i] + &quot;[.]&quot;;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            ip += subip[subip.length-1];</span><br><span class="hljs-comment">//            return ip;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">defangIPaddr</span><span class="hljs-params">(String address)</span> </span>&#123;<br>            StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;address.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (address.charAt(i) != <span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>                    sb.append(address.charAt(i));<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    sb.append(<span class="hljs-string">&quot;[.]&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(sb.toString());<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1221.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.string;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1221</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分割平衡字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str = <span class="hljs-string">&quot;RLRRLLRLRL&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.balancedStringSplit(str));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int balancedStringSplit(String s) &#123;</span><br><span class="hljs-comment">//            int balanceCount = 0;</span><br><span class="hljs-comment">//            int rCount = 0;</span><br><span class="hljs-comment">//            int lCount = 0;</span><br><span class="hljs-comment">//            for (int i = 0;i&lt;s.length();i++)&#123;</span><br><span class="hljs-comment">//                if (s.charAt(i) == &#x27;R&#x27;) rCount++;</span><br><span class="hljs-comment">//                if (s.charAt(i) == &#x27;L&#x27;) lCount++;</span><br><span class="hljs-comment">//                if (rCount == lCount) balanceCount++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return balanceCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">balancedStringSplit</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> balanceCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(i) == <span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>                    count++;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    count--;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)&#123;<br>                    balanceCount++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> balanceCount;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>535.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.string;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_535</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *TinyURL 的加密与解密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String URL =<span class="hljs-string">&quot;https://leetcode.com/problems/design-tinyurl&quot;</span>;<br>        Codec codec = <span class="hljs-keyword">new</span> Codec();<br>        System.out.println(codec.encode(URL));<br><br>        System.out.println(codec.decode(codec.encode(URL)));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：hashmap存tinyurl和url，tinyurl对应键，url对应值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String INDEX = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String tinyURL_prefix = <span class="hljs-string">&quot;http://tinyurl.com/&quot;</span>;<br><br>        HashMap&lt;String,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">// Encodes a URL to a shortened URL.</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String longUrl)</span> </span>&#123;<br>            <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">6</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;chars.length;i++)&#123;<br>                chars[i] = INDEX.charAt((<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">62</span>));<span class="hljs-comment">//Math.random() 的范围是[0,1)，(int) 向下取整，(int)Math.random()*62 的取值范围是[0, 61]</span><br>            &#125;<br>            String str_encode = <span class="hljs-keyword">new</span> String(chars);<br>            String tinyURL = tinyURL_prefix + str_encode;<br>            <span class="hljs-comment">//前边两行也可以简写成下边这一行</span><br>            <span class="hljs-comment">// String tinyURL = tinyURL_prefix + new String(chars);</span><br><br>            <span class="hljs-keyword">if</span> (!hm.containsKey(longUrl))&#123;<br>                hm.put(tinyURL,longUrl);<br>            &#125;<br>            <span class="hljs-keyword">return</span> tinyURL;<br>        &#125;<br><br>        <span class="hljs-comment">// Decodes a shortened URL to its original URL.</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">decode</span><span class="hljs-params">(String shortUrl)</span> </span>&#123;<br>            String URL = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (hm.containsKey(shortUrl))&#123;<br>                URL = hm.get(shortUrl);<br>            &#125;<br>            <span class="hljs-keyword">return</span> URL;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2021/09/14/%E6%95%B0%E7%BB%84/"/>
    <url>/2021/09/14/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<hr><p>1929.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1929</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数组串联</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.getConcatenation(nums)));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] getConcatenation(<span class="hljs-keyword">int</span>[] nums) &#123;<br>            <span class="hljs-keyword">int</span> ans[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length * <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>                ans[i] = nums[i];<br>                ans[i+nums.length] = nums[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1920.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s002</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于排列构建数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        <span class="hljs-keyword">int</span> res[] = solution.buildArray(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; res.length;i++)&#123;<br>            System.out.println(res[i]);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] buildArray(<span class="hljs-keyword">int</span>[] nums) &#123;<br>            <span class="hljs-keyword">int</span> n = nums.length;<br>            <span class="hljs-keyword">int</span> ans[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; n;i++)&#123;<br>                ans[i] = nums[nums[i]];<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1480.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s1480</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一维数组的动态和</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.runningSum(nums)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想:暴力双循环，把结果数组的每个位置求一边</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int[] runningSum(int[] nums) &#123;</span><br><span class="hljs-comment">//            int sum[] = new int[nums.length];</span><br><span class="hljs-comment">//            for (int i = 0;i&lt; sum.length;i++)&#123;</span><br><span class="hljs-comment">//                for (int j = 0;j&lt;=i;j++)&#123;</span><br><span class="hljs-comment">//                    sum[i] = sum[i] + nums[j];</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return sum;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：前缀和，结果数组的每个位置i=前一个位置（i-1）+给定数组的i位置之和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] runningSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>            <span class="hljs-keyword">int</span> sum[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>            sum[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;sum.length;i++)&#123;<br>                sum[i] = sum[i-<span class="hljs-number">1</span>]+nums[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1720.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s1720</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解码异或后的数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> encoded[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.decode(encoded,<span class="hljs-number">1</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想，本质是求异或的逆运算</span><br><span class="hljs-comment">     * 发现: 当a^b=c时，a=b^c;</span><br><span class="hljs-comment">     * 因此dc[i] = encoded[i-1]^dc[i-1];</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] decode(<span class="hljs-keyword">int</span>[] encoded, <span class="hljs-keyword">int</span> first) &#123;<br>            <span class="hljs-keyword">int</span> dc[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[encoded.length+<span class="hljs-number">1</span>];<br>            dc[<span class="hljs-number">0</span>] = first;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;dc.length;i++)&#123;<br>                dc[i] = encoded[i-<span class="hljs-number">1</span>]^dc[i-<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> dc;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1521.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1512</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 好数对数目</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.numIdenticalPairs(nums));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：利用hashmap统计每个数组元素出现的次数n，每个元素n*(n-1)/2表示符合条件的好数对，然后求和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIdenticalPairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> ans =<span class="hljs-number">0</span>;<br>            HashMap&lt;Integer, Integer&gt; hs = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num:nums)&#123;<br>                hs.put(num,hs.getOrDefault(num,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//getOrDefault(Object key, V defaultValue)</span><br>                <span class="hljs-comment">//意思就是当Map集合中有这个key时，就使用这个key对应的value值，如果没有就使用默认值defaultValue</span><br>            &#125;<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:hs.entrySet())&#123;<br>                <span class="hljs-keyword">int</span> v = entry.getValue();<br>                ans += v*(v-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1828.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m1828</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 统计一个圆中点的数目</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> points[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;&#125;;<br>        <span class="hljs-keyword">int</span> queries [][] = &#123;&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.countPoints(points,queries)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解题思路：写一个方法求给定的点中，有几个在圆内</span><br><span class="hljs-comment">     * 主要是判断一个点是否在圆内的公式为，求点到圆心的距离是否小于该圆半径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-comment">//        public int[] countPoints(int[][] points, int[][] queries) &#123;</span><br><span class="hljs-comment">//            int cPoint[] = new int[queries.length];</span><br><span class="hljs-comment">//            for (int i = 0;i&lt;cPoint.length;i++)&#123;    //求每个查询包含的点</span><br><span class="hljs-comment">//                for (int j = 0;j&lt;points.length;j++)&#123;    //遍历每个点</span><br><span class="hljs-comment">//                    cPoint[i] = countP(points,queries[i]);</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return cPoint;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        //写一个方法求给定的点中，有几个在圆内</span><br><span class="hljs-comment">//        //或者写一个方法判断给定点是否在圆内</span><br><span class="hljs-comment">//        public int countP(int [][] points,int [] query)&#123;</span><br><span class="hljs-comment">//            int count = 0;</span><br><span class="hljs-comment">//            for (int i = 0;i&lt;points.length;i++)&#123;</span><br><span class="hljs-comment">//                if ((double)Math.sqrt((points[i][0]-query[0])*(points[i][0]-query[0])</span><br><span class="hljs-comment">//                        +(points[i][1]-query[1])*(points[i][1]-query[1]))&lt;=query[2])&#123;</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return count;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] countPoints(<span class="hljs-keyword">int</span>[][] points, <span class="hljs-keyword">int</span>[][] queries) &#123;<br>            <span class="hljs-keyword">int</span> cPoint[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[queries.length];<br>            <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;cPoint.length;i++)&#123;    <span class="hljs-comment">//求每个查询包含的点</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;points.length;j++)&#123;    <span class="hljs-comment">//遍历每个点</span><br>                    <span class="hljs-keyword">if</span> (Math.sqrt((points[j][<span class="hljs-number">0</span>]-queries[i][<span class="hljs-number">0</span>])*(points[j][<span class="hljs-number">0</span>]-queries[i][<span class="hljs-number">0</span>])+(points[j][<span class="hljs-number">1</span>]-queries[i][<span class="hljs-number">1</span>])*(points[j][<span class="hljs-number">1</span>]-queries[i][<span class="hljs-number">1</span>]))&lt;= queries[i][<span class="hljs-number">2</span>])&#123;<br>                        temp++;<br>                    &#125;<br>                &#125;<br>                cPoint[i] = temp;<br>                temp = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> cPoint;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1476.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1476</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子矩形查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>        test.test();<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubrectangleQueries</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rectangle[][];<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SubrectangleQueries</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] rectangle)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.rectangle = rectangle;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateSubrectangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row1, <span class="hljs-keyword">int</span> col1, <span class="hljs-keyword">int</span> row2, <span class="hljs-keyword">int</span> col2, <span class="hljs-keyword">int</span> newValue)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row1; i &lt;= row2; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = col1; j &lt;= col2; j++) &#123;<br>                    rectangle[i][j] = newValue;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> rectangle[row][col];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">int</span> rectangle[][] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>            SubrectangleQueries subrectangleQueries = <span class="hljs-keyword">new</span> SubrectangleQueries(rectangle);<br>            subrectangleQueries.updateSubrectangle(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rectangle.length; i++) &#123;   <span class="hljs-comment">//hang</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; rectangle[i].length; j++) &#123;<br>                    System.out.print(subrectangleQueries.rectangle[i][j]+<span class="hljs-string">&quot;,&quot;</span>);;<br>                &#125;<br>                System.out.println();<br>            &#125;<br>            System.out.println(subrectangleQueries.getValue(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1769.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1769</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移动所有球到每个盒子所需的最小操作数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String boxes = <span class="hljs-string">&quot;001011&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.minOperations(boxes)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] minOperations(String boxes) &#123;<br>            <span class="hljs-keyword">int</span> answer[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[boxes.length()];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; boxes.length(); i++) &#123;<br>                <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; boxes.length(); j++) &#123;<br>                    <span class="hljs-keyword">if</span> (j!=i &amp;&amp; boxes.charAt(j) == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                        sum = sum + Math.abs(j-i);<br>                    &#125;<br>                &#125;<br>                answer[i] = sum;<br>            &#125;<br>            <span class="hljs-keyword">return</span> answer;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1672.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1672</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最富有客户的资产总量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> accounts[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.maximumWealth(accounts));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maximumWealth</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] accounts)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;accounts.length;i++)&#123;<br>                <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j= <span class="hljs-number">0</span>;j&lt;accounts[i].length;j++)&#123;<br>                    temp = temp + accounts[i][j];<br>                &#125;<br>                <span class="hljs-keyword">if</span> (sum &lt; temp)&#123;<br>                    sum = temp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>访问github</title>
    <link href="/2021/09/09/%E8%AE%BF%E9%97%AEgithub/"/>
    <url>/2021/09/09/%E8%AE%BF%E9%97%AEgithub/</url>
    
    <content type="html"><![CDATA[<hr><p>1.<a href="http://github.com.ipaddress.com/">http://github.com.ipaddress.com/</a></p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20210909143720888.png" alt="image-20210909143720888" style="zoom: 67%;" /><p>复制IP</p><p>140.82.113.4 GitHub.com</p><hr><p>2.<a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net</a></p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20210909143922126.png" alt="image-20210909143922126" style="zoom:67%;" /><p>复制IP </p><p>199.232.69.194 github.global.ssl.Fastly.net</p><p>打开我的电脑-windows-System32-drivers-etc-hosts</p><p>将上边IP复制到hosts文件最下边</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20210909144133269.png" alt="image-20210909144133269"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>leetcode_firstday</title>
    <link href="/2021/09/09/leetcode-day1/"/>
    <url>/2021/09/09/leetcode-day1/</url>
    
    <content type="html"><![CDATA[<p>刷leetcode第一天</p><hr><p>1.两数相加（simple）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>&#125;;<br>        <span class="hljs-keyword">int</span> target = <span class="hljs-number">9</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        <span class="hljs-keyword">int</span> indexs[] = solution.twoSum(nums,target);<br>        System.out.println(<span class="hljs-string">&quot;[&quot;</span>+indexs[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;,&quot;</span>+indexs[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：</span><br><span class="hljs-comment">     * 1.采用Hashmap，key存数组元素，value存数组元素对应下标</span><br><span class="hljs-comment">     * 2.遍历给定数组，判断哈希表键的集合中是否包含target-nums[i]，即hs.containsKey(target-nums[i])</span><br><span class="hljs-comment">     * 3.如果为false，说明没找到两数相加得目标值target的数组元素，则将该遍历到的数组元素加入哈希表中</span><br><span class="hljs-comment">     * 4.如果为true，说明找到了，即遍历到的数组元素a[i]和目标值target-a[i]（在哈希表中），将对应的数组下标取出即可。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>            HashMap&lt;Integer, Integer&gt; hs = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> index[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt; nums.length;i++)&#123;<br>                <span class="hljs-keyword">if</span> (hs.containsKey(target-nums[i]))&#123;<br>                    index[<span class="hljs-number">0</span>] = hs.get(target-nums[i]);<br>                    index[<span class="hljs-number">1</span>] = i;<br>                    <span class="hljs-keyword">return</span> index;<br>                &#125;<br>                hs.put(nums[i],i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.链表中两数相加（middle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m001</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br><br>        ListNode() &#123;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode n1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        ListNode n2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        n1.next = n2;<br>        n2.next = n3;<br><br>        ListNode n4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n5 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        n4.next = n5;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode l = solution.twoSum(n1, n4);<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (l.next != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.print(l.val + <span class="hljs-string">&quot;,&quot;</span>);<br>            l = l.next;<br>        &#125;<br>        System.out.println(l.val + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思路：</span><br><span class="hljs-comment">     * 任意某一链表不为空时，两数相加得sumVal</span><br><span class="hljs-comment">     * remainder表示余数，rem=sumVal%10，表示两个位数相加，个位数存入链表</span><br><span class="hljs-comment">     * carry表示进位，car=sumVal/10，说明有进位，加入后续</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">twoSum</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>            ListNode root = <span class="hljs-keyword">new</span> ListNode();     <span class="hljs-comment">//结果链表头结点</span><br>            ListNode curse = root;  <span class="hljs-comment">//游标</span><br>            <span class="hljs-keyword">int</span> sumVal;<br>            <span class="hljs-keyword">int</span> rem;<br>            <span class="hljs-keyword">int</span> car = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span> || car != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">int</span> l1val = l1 != <span class="hljs-keyword">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">int</span> l2val = l2 != <span class="hljs-keyword">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>                sumVal = l1val + l2val + car;<br>                rem = sumVal % <span class="hljs-number">10</span>;<br>                car = sumVal / <span class="hljs-number">10</span>;<br>                ListNode remNode = <span class="hljs-keyword">new</span> ListNode(rem);<br>                curse.next = remNode;<br>                curse = remNode;<br><br>                <span class="hljs-keyword">if</span> (l1!= <span class="hljs-keyword">null</span>) l1 = l1.next;<br>                <span class="hljs-keyword">if</span> (l2!= <span class="hljs-keyword">null</span>) l2 = l2.next;    <span class="hljs-comment">//必须加判断，因为如果当前l2为空，l1不为空，进入下一次循环时，由于上一步l2已经为空，如果不加判断，正常走l2还要后移，则一定报错。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> root.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.计算字符串中最大无重复子字符串长度（middle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m002</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcab&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.lengthOfLongestSubstring(s));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想1：</span><br><span class="hljs-comment">     * 1.用index表示开始遍历的字符串字符元素下标，从头遍历，将得到的字符加入HashSet。</span><br><span class="hljs-comment">     * 2.当出现集合中的字符时，记录不同字符数，然后将集合清空，将index+1，再开始遍历。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="hljs-comment">//            HashSet&lt;Character&gt; hs = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">////            char[] cs = s.toCharArray();</span><br><span class="hljs-comment">//            int index = 0;  //记录开始遍历的数组元素下标</span><br><span class="hljs-comment">//            int count = 0;  //无重复字母字符串计数器</span><br><span class="hljs-comment">//            int maxCount = 0;   //记录最大count值</span><br><span class="hljs-comment">//            while (index &lt; s.length()+1)&#123;</span><br><span class="hljs-comment">//                for (int i = index; i &lt; s.length(); i++) &#123;   //遍历字符串</span><br><span class="hljs-comment">//                    if (hs.contains(s.charAt(i))) &#123;</span><br><span class="hljs-comment">//                        count = 0;</span><br><span class="hljs-comment">//                        hs.clear();</span><br><span class="hljs-comment">//                        break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    hs.add(s.charAt(i));</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                    if (count &gt; maxCount) &#123;</span><br><span class="hljs-comment">//                        maxCount = count;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                index++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return maxCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想2：滑动窗口</span><br><span class="hljs-comment">     * 1.用hashmap存放字符及对应下标</span><br><span class="hljs-comment">     * 2.left表示左指针，即指向无重复字符串的首位，for循环遍历字符串，i表示无重复字符串的末位</span><br><span class="hljs-comment">     * 3.hashmap中若不包含当前遍历到字符，则加入hashmap中，继续遍历</span><br><span class="hljs-comment">     * 若包含当前遍历到的字符，则left移动到hashmap中该字符对应的下标位置，并将hashmap中该字符的对应下标替换成当前遍历到的字符的下标hm.put(s.charAt(i),i)，</span><br><span class="hljs-comment">     * 然后继续遍历字符串直到结束。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span></span>&#123;<br>            HashMap&lt;Character, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (hm.containsKey(s.charAt(i)))&#123;<br>                    left = Math.max(left,hm.get(s.charAt(i))+<span class="hljs-number">1</span>);<br>                &#125;<br>                hm.put(s.charAt(i),i);<span class="hljs-comment">//hashmap.put()方法，遇到相同的key时，会替换value</span><br>                max = Math.max(max,i-left+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
