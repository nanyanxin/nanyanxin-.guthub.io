<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/11/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/"/>
    <url>/2021/12/11/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86?id=%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86">基础概念与常识</a></p><p><strong>基础概念与常识</strong></p><p>1.Java特点</p><p>平台无关性（java虚拟机）</p><p>编译与解释并存</p><p>2.JVM vs JDK vs JRE</p><p>JVM是运行 Java 字节码的虚拟机，针对不同系统的有特定实现（Windows，Linux，macOS），目的是使用相同的字节码，给出相同的结果。 JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件</p><p>不同操作系统上的jvm是不同的，但是JDK通过javac编译出来的字节码是一样的，不同的jvm可以编译同一种字节码，所以Java可以实现“一次编译，随处运行”。</p><p><img src="C:\Users\DB\AppData\Local\YNote\data\weixinobU7VjkJfoinCoOkJbwpgpBd_c4w\ad3cd3ae09ac4627b17b9e0a2594675a\22fceadac630e36cfa879796b8768233.jpg" alt="img"></p><p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果只是为了运行一下 Java 程序，只需要安装 JRE 就可以。如果要进行一些 Java 编程方面的工作，就需要安装 JDK 了。但是有时，即使不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，由于应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><p>3.Java编译与解释并存</p><p>编译型是一次性翻译成机器语言，解释型是一行一行解释成机器语言，而Java由于是先编译成字节码，再解释成机器语言，所以。</p><p>4.oracle JDK和open JDK对比</p><p>open JDK可以说是一个参考模型，并且完全开源，oracle JDK是openJDK的一个实现，不完全开源</p><p>oracle JDK比open JDK稳定且性能好</p><p>5.Java与C++区别</p><p>都是面向对象的语言，都支持封装、继承和多态</p><p>Java 不提供指针来直接访问内存，程序内存更加安全</p><p>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</p><p>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</p><p>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。</p><p>……</p><p><strong>基本语法和基本数据类型</strong></p><p>1.八个基本类型</p><p><img src="C:\Users\DB\AppData\Local\YNote\data\weixinobU7VjkJfoinCoOkJbwpgpBd_c4w\055986e8746a421aa9382408dad74bd9\clipboard.png" alt="img"></p><p>2.关键字</p><table><thead><tr><th>分类</th><th>关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>protected</td><td>public</td><td></td><td></td><td></td><td></td></tr><tr><td>类，方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr><td></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td></td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr><td></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>default</td><td></td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr><td></td><td>short</td><td>null</td><td>true</td><td>false</td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>3.范型</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86?id=java-%E6%B3%9B%E5%9E%8B%E4%BA%86%E8%A7%A3%E4%B9%88%EF%BC%9F%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%EF%BC%9F%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E9%80%9A%E9%85%8D%E7%AC%A6%EF%BC%9F">Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</a></p><p>4.==和hashcode和equals</p><p><a href="https://www.cnblogs.com/skywang12345/p/3324958.html">Java hashCode() 和 equals()的若干问题解答</a></p><p>5.自动装箱和拆箱</p><p>装箱：将基本类型用它们对应的引用类型包装起来；</p><p>拆箱：将包装类型转换为基本数据类型；</p><p>Integer i = 10;  //装箱    等价于 Integer i = Integer.valueOf(10) int n = i;   //拆箱    等价于 int n = i.intValue();</p><p>6.包装类型与常量池技术</p><p>java的包装类型中Byte,Short,Integer,Long,Character,Boolean都实现了常量池技术，另外两种浮点型的包装类没有。</p><p>Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，Character 创建了数值在[0,127]范围的缓存数据，Boolean 直接返回 True Or False。</p><p>如：        Integer i1=127;</p><p>​        Integer i2=127;</p><p>​        System.out.println(i1==i2)//输出true</p><p>​         //值大于127时，不会从常量池中取对象</p><p>​        Integer i3=128;</p><p>​        Integer i4=128;</p><p>​        System.out.println(i3==i4)//输出false</p><p>​        //Boolean类也实现了常量池技术</p><p>​        Boolean bool1=true;</p><p>​        Boolean bool2=true;</p><p>​        System.out.println(bool1==bool2);//输出true</p><p>​        //浮点类型的包装类没有实现常量池技术</p><p>​        Double d1=1.0;</p><p>​        Double d2=1.0;</p><p>​        System.out.println(d1==d2)//输出false</p><p><a href="https://blog.csdn.net/zhangyaqingjjy/article/details/8685498">Java常量池技术</a></p><p><img src="C:\Users\DB\AppData\Local\YNote\data\weixinobU7VjkJfoinCoOkJbwpgpBd_c4w\01c7277f30c04b43aea81504db24dc87\clipboard.png" alt="img"></p><p><strong>方法（函数）</strong></p><p>1.在静态方法中调用非静态方法是违法的</p><p>英文静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，然后通过类的实例对象去访问。在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</p><p>2.静态方法和实例方法的不同</p><p>①在外部调用静态方法时，可以使用 类名.方法名 的方式，也可以使用 对象.方法名 的方式，而实例方法只有后面这种方式。一般建议使用 类名.方法名 的方式来调用静态方法。</p><p>②静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。</p><p>3.Java中为什么只有值传递</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86?id=%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F">为什么 Java 中只有值传递？</a></p><p>4.重载和重写的区别</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86?id=%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB">重载和重写的区别</a></p><p>对于重载</p><p>签名指的是：方法名和参数类型</p><p>对于重写</p><p>返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</p><p>如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。</p><p>构造方法无法被重写</p><p>重写遵循“两同两小一大”：</p><p>​        “两同”即方法名相同、形参列表相同；</p><p>​        “两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</p><p>​        “一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</p><p>5.浅拷贝和深拷贝</p><p>浅拷贝，（拷贝的是对象地址）对基本数据类型进行值传递，对引用数据类型进行引用传递，此为浅拷贝</p><p>深拷贝，（会新建对象）对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</p><p><strong>Java面向对象</strong></p><p>1.面向对象和面向过程的区别</p><p>面向过程性能一般较高，因为面向对象在类调用时，需要实例化，消耗资源，开销比较大</p><p>面向对象易维护，复用性好，也易扩展，因为面向对象有封装，继承，多态的特性</p><p>2.成员变量和局部变量的区别</p><p>1.从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</p><p>2.从变量在内存中的存储方式来看,如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</p><p>3.从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</p><p>4.从变量是否有默认值来看，成员变量如果没有被赋初，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</p><p>3.<a href="">创建一个对象用什么运算符?对象实体与对象引用有何不同?</a></p><p>4.<a href="">对象的相等与指向他们的引用相等,两者有什么不同?</a></p><p>5.<a href="">String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</a></p><p>操作少量的数据: 适用 String</p><p>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</p><p>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</p><p>6.Object类主要提供了11个方法</p><p>getclass()</p><p>hashcode()</p><p>equals()</p><p>clone()</p><p>toString()</p><p>notify()</p><p>notifyAll()</p><p>wait() 3种</p><p>finalize()</p><p><strong>反射</strong></p><p><a href="">反射</a></p><p><strong>异常</strong></p><p><a href="">异常</a></p><p><strong>I/O流</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/11/Java%20%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/12/11/Java%20%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/multi-thread/Java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93?id=java-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93">Java 并发基础</a></p><p><strong>java****多线程基础</strong></p><p>1.线程基本使用</p><p>使用继承Thread来实现创建线程</p><p>Cat类继承了Thread类</p><p>Cat c = new Cat();c.start(); *//*<em>启动线程</em></p><p>Java是单继承的，在某些情况下一个类可能已经继承了某个父类，这时再用继承Thread类的方式创建线程就不行了。这时，可以通过实现Runnable接口来创建线程。</p><p>dog类实现了Runnable接口</p><p>dog d = new dog();*//d.start(); //Runnable<strong>中没有</strong>start()*<em>方法</em>Thread thread = new Thread(d);thread.start();</p><p>这里底层使用了一种设计模式，采用了”代理模式”</p><p>实现Runnable接口的方式更加适合多个线程共享一个资源的情况，避免了单继承的限制</p><p>t1 th1 = new t1(); Thread thread1 = new Thread(th1); Thread thread2 = new Thread(th1); thread1.start(); thread2.start();</p><p>2.线程终止</p><p>在线程中设置Boolean变量loop，将loop作为循环条件，并提供一个setLoop方法。在main线程中，当满足某条件时，setLoop(false)。</p><p>3.线程常用方法</p><p>setName //设置线程名称</p><p>getName //返回该线程名称</p><p>start //使线程开始执行，Java虚拟机地城调用该线程的start0方法</p><p>run //调用线程对象run方法</p><p>setPriority //更改线程优先级</p><p>getPriority //获取线程的优先级</p><p>sleep //在指定的毫秒数呢让当前正在执行的线程休眠（暂停执行）</p><p>interrupt //中断线程</p><p>yield() //线程礼让，让出cpu，让其他线程执行，但礼让时间不确定，也不一定礼让成功</p><p>join() //线程插队，插队的线程一旦插入成功，则肯定先执行完插入线程的所有任务。</p><p>4.守护线程</p><p>当主线程结束后，如果希望子线程自动结束，只需将子线程设置成守护线程subThread.setDaemon(true);</p><p>常见的守护线程为垃圾回收机制(只要程序中还有线程在执行，垃圾回收机制就一直在)</p><p>5.线程状态</p><p>线程状态。 线程可以处于以下状态之一：</p><p>NEW尚未启动的线程处于此状态。（新建的线程，还未调用start方法）</p><p>RUNNABLE  在Java虚拟机中执行的线程处于此状态。（RUNNABLE中还可分为Ready和Running）</p><p>BLOCKED    被阻塞等待监视器锁定的线程处于此状态。</p><p>WAITING    正在等待另一个线程执行特定动作的线程处于此状态。</p><p>TIMED_WAITING  正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</p><p>TERMINATED    已退出的线程处于此状态。</p><p><img src="file:///C:/Users/DB/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="clipboard.png"></p><p>6.线程同步(Synchronzed)非公平锁</p><p>数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性</p><p>可以在方法上加锁，也可以在代码块上加锁</p><p>7.互斥锁</p><p>关键字Synchronized来与对象的互斥锁联系，当某个对象用Synchronized修饰时，表明该对象在任意时刻只能由一个线程访问</p><p>同步方法（非静态）的锁可以是this，也可以是其他对象（要求是同一对象）</p><p>同步方法（静态）的锁为当前类本身</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2021/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="1-外键"><a href="#1-外键" class="headerlink" title="1.外键"></a>1.外键</h2><h3 id="1-主键和外键的区别"><a href="#1-主键和外键的区别" class="headerlink" title="1.主键和外键的区别"></a>1.主键和外键的区别</h3><p>主键用于唯一标识一个元组，不能有重复，不允许为空，一个表只能有一个主键</p><p>外键用于和其他表建立联系，外键是另一个表的主键，外键可以重复，可以是空，一个表可以有多个外键。</p><h3 id="2-为什么不推荐使用外键与级联"><a href="#2-为什么不推荐使用外键与级联" class="headerlink" title="2.为什么不推荐使用外键与级联"></a>2.为什么不推荐使用外键与级联</h3><p>级联，举个例子，如果学生表的主键是student_id，成绩表的student_id为外键，当更新学生表的student_id时，同时会触发成绩表中student_id的更新，此为级联。</p><p>外键主要是对分库分表不友好，使用外键增减了复杂性和额外工作，每次更新或者删除操作时，都需要考虑外键约束。</p><p>但对于不涉及分库分表的系统外键还是有一定好处的，比如包证数据库数据的一致性和完整性，级联操作方便了，减轻代码量。</p><h2 id="2-drop，delete，truncate区别"><a href="#2-drop，delete，truncate区别" class="headerlink" title="2.drop，delete，truncate区别"></a>2.drop，delete，truncate区别</h2><p>drop（丢弃数据），drop table 表名，直接将表删除。</p><p>delete（删除数据），delete from 表名 where 列名=值，删除表中某一行数据</p><p>truncate（清空数据），truncate table 表名，删除表中数据，再向表中插入数据时，自增长id从1开始。</p><p>drop是DML语句即数据库操作语言，delete和truncate是DDL语句即数据库定义语言。</p><h2 id="3-数据库设计通常分为哪几步？"><a href="#3-数据库设计通常分为哪几步？" class="headerlink" title="3.数据库设计通常分为哪几步？"></a>3.数据库设计通常分为哪几步？</h2><p>1.需求分析</p><p>2.概念结构设计</p><p>3.逻辑结构设计</p><p>4.物理结构设计</p><p>5.数据库实施</p><p>6.数据库的运行和维护</p><h2 id="4-数据库范式"><a href="#4-数据库范式" class="headerlink" title="4.数据库范式"></a>4.数据库范式</h2><p>第一范式（1NF）</p><p>属性（表中字段）不能再被分割，也就是这个字段只能是一个值。1NF是所有关系型数据库的最基本要求。</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211209220337428.png" alt="image-20211209220337428"></p><p>第二范式（2NF）</p><p>表中的非主属性必须完全依赖于主属性。</p><p>2NF在1NF的基础上消除了非主属性对主属性的部分函数依赖。</p><p>第三范式（3NF）</p><p>表中的所有数据元素不但要能唯一被主关键字所标识，而且它们之间还必须相互独立，不存在其他的函数关系。</p><p>3NF在2NF的基础上消除了非主属性对主属性的传递函数依赖。</p><p>BCNF（3.5范式）</p><p>消除主属性对主键的部分与传递依赖</p><p>第四范式（4NF）</p><p>消除表中的多值依赖</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>关系型数据库就是建立在关系模型基础上的数据库。数据之间的关系（一对一，一对多，多对多）</p><h2 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1.存储引擎"></a>1.存储引擎</h2><p>mysql 5.5之前使用的存储引擎是MyISAM，mysql 5.5之后，默认使用InnoDB。</p><p>查看表的存储引擎的命令是：show table status like “表名”</p><h3 id="InnoDB和MyISAM的区别"><a href="#InnoDB和MyISAM的区别" class="headerlink" title="InnoDB和MyISAM的区别"></a>InnoDB和MyISAM的区别</h3><p>InnoDB支持事务和行级锁，具有提交和回滚的事务能力；MyISAM不支持，只有表级锁，而且奔溃后无法安全恢复。</p><h2 id="2-事务"><a href="#2-事务" class="headerlink" title="2.事务"></a>2.事务</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p><p>比如，a给b转账100，那么a余额减少100，b余额增加100，事务会把这两个操作看作一个整体，要么都成功，要么都失败。</p><h4 id="1-事务特性（ACID）"><a href="#1-事务特性（ACID）" class="headerlink" title="1.事务特性（ACID）"></a>1.事务特性（ACID）</h4><p>1.原子性（Atomicity）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么全不起作用。</p><p>MySQL InnoDB引擎使用undo log（回滚日志）保证事务的原子性。</p><p>2.一致性（Consistency）：执行事务前后，数据保持一致。例如转账时，无论事务成不成功，转账者和收款者余额总和不变。</p><p>3.隔离性（Isolation）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的。</p><p>MySQL InnoDB 引擎通过锁机制，MVCC等手段保证事务的隔离性。</p><p>4.持久性（Durability）：一个事务被提交之后，它对数据库中数据的改变是持久的。</p><p>MySQL InnoDB引擎使用  redo log（重做日志）保证事务的持久性。</p><h4 id="2-并发事务带来哪些问题"><a href="#2-并发事务带来哪些问题" class="headerlink" title="2.并发事务带来哪些问题"></a>2.并发事务带来哪些问题</h4><p>1.脏读，</p><p>2.丢失修改</p><p>3.不可重复读</p><p>4.换读</p><h4 id="3-事务隔离级别有哪些？"><a href="#3-事务隔离级别有哪些？" class="headerlink" title="3.事务隔离级别有哪些？"></a>3.事务隔离级别有哪些？</h4><p>1.读取未提交</p><p>2.读取已提交</p><p>3.可重复读</p><p>4.可串行化</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211209233627144.png" alt="image-20211209233627144"></p><p>MySQL默认隔离级别是 可重复读。</p><h2 id="3-索引"><a href="#3-索引" class="headerlink" title="3.索引"></a>3.索引</h2><p>在MySQL中，MyISAM引擎和InnoDB都是使用B+TREE作为索引结构。</p><h3 id="1-B树和B-树"><a href="#1-B树和B-树" class="headerlink" title="1. B树和B+树"></a>1. B树和B+树</h3><p>B树全称为多路平衡查找树，一棵m阶B树</p><p>1）树中每个节点至多有m棵子树，根节点至少有两棵子树，除根节点以外的所有非叶节点至少有┌m/2┐ 棵子树。</p><p>2）每个非根节点所包含的关键字个数最少┌m/2┐-1，最多m-1。</p><p>3）所有叶节点都位于同一层，并不带任何信息。</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1496926%2F201911%2F1496926-20191121131540064-1808531936.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641712114&t=00b06351f0ded49fb14873c2a7da2d27" alt="img"></p><p>B+树是B树的变种</p><p>1）树中每个节点至多有m个子树，根节点至少两个子树，除根节点以外的所有非叶子节点至少有┌m/2┐ 棵子树。</p><p>2）有k个子树的节点必有k个关键字。</p><p>3）所有叶节点位于同一层，数据保存在叶节点中。</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211210150948552.png" alt="image-20211210150948552"></p><h4 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h4><p>1）B树所有节点既存放键key也存放数据data；而B+树只有叶子节点存放key和data，其它节点存放key。</p><p>2）B树的所有叶子节点都是独立的；而B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</p><p>3）B树的检索过程相当于对范围内的每个节点的关键字做二分查找，找到就停止。而B+树的任何查找都是从根节点到叶子节点。</p><h3 id="2-索引类型"><a href="#2-索引类型" class="headerlink" title="2.索引类型"></a>2.索引类型</h3><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>数据表的主键列使用的就是主键索引。</p><p>在MySQL的InnoDB的表中。当没有指定表的主键是，InnoDB会自动先检查表中是否有唯一索引的字段，如果有则选择该字段为默认的主键，否则InnoDB将会自动创建一个6 Byte的自增主键。</p><h4 id="二级索引（辅助索引）"><a href="#二级索引（辅助索引）" class="headerlink" title="二级索引（辅助索引）"></a>二级索引（辅助索引）</h4><p>一级索引也叫集聚索引，叶子节点存放主索引和数据的树。一般主键索引都是一级索引。</p><p>二级索引也叫非集聚索引，叶子结点存放辅助索引和主索引的树。</p><p>一级索引可以单独存在，二级索引不能单独存在，必须依附于一级索引，这叫做“回表”。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1-OSI与TCP-IP各层的结构与功能"><a href="#1-OSI与TCP-IP各层的结构与功能" class="headerlink" title="1.OSI与TCP/IP各层的结构与功能"></a>1.OSI与TCP/IP各层的结构与功能</h2><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211207173414342.png" alt="image-20211207173414342"></p><h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h3><p>应用层的任务是通过应用进程间的交互来完成特定网络应用，应用层的协议定义的是应用进程间的通信和交互的规则。</p><p>应用层协议有，域名系统（DNS），超文本传输协议（HTTP），电子邮件传输协议（SMTP）等。</p><p>应用层交互的数据单元称为报文。</p><h3 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2.传输层"></a>2.传输层</h3><p>传输层的任务是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层的报文。</p><p>传输层有分用和复用的功能。复用指多个应用层进程可用时使用下面运输层的服务。分用是指运输层把收到的信息分别交付给上面应用层的各进程。</p><p>传输层的协议主要有TCP和UDP。</p><p>传输控制协议（TCP）：提供面向连接的，可靠的数据传输服务。</p><p>用户数据协议（UDP）：提供无连接的数据传输服务，不保证数据传输的可靠性。</p><p>TCP数据报格式:</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211208102811226.png" alt="image-20211208102811226" style="zoom: 67%;" /><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211208102914290.png" alt="image-20211208102914290" style="zoom: 67%;" /></p><p>UDP数据报格式：</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211208103112120.png" alt="image-20211208103112120"><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211208103123416.png" alt="image-20211208103123416"></p><h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h3><p>网络层的任务是选择合适的网间路由和交换节点，确保数据及时传送。因为两个计算机在网络中通信时会经过很多个数据链路，还有通信子网。</p><p>在发送数据时，网络层会把传输层产生的报文段或用户数据报封装成分组或报进行传送，由于网络层使用IP协议，因此该分组或包也叫IP数据报，简称数据报。</p><p>网络层的协议主要是跟路由相关的协议，此外有IP，ICMP</p><p>IP数据报格式：</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211208102512142.png" alt="image-20211208102512142"></p><h3 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="4.数据链路层"></a>4.数据链路层</h3><p>数据链路层主要任务是将从网络层接收到的数据报分割成特定的可被物理层传输的帧，在相邻两个节点间传送。此外还有查错功能，制定MAC方法等。</p><p>数据链路层的协议主要有ARP和RARP</p><h3 id="5-物理层"><a href="#5-物理层" class="headerlink" title="5.物理层"></a>5.物理层</h3><p>物理层的作用是实现计算机之间比特流的透明传输，尽可能屏蔽掉具体传输介质和物理设备的差异。</p><h2 id="2-TCP-三次握手和四次挥手"><a href="#2-TCP-三次握手和四次挥手" class="headerlink" title="2. TCP 三次握手和四次挥手"></a>2. TCP 三次握手和四次挥手</h2><h3 id="2-1三次握手"><a href="#2-1三次握手" class="headerlink" title="2.1三次握手"></a>2.1三次握手</h3><p>三次握手是为了建立连接，双方进行接收和发送数据</p><p>请求标识SYN，确认标识ACK</p><p>序列号seq（发出的）（随机生成） 防止被别人模拟</p><p>序列号ack（回复的）</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211207233006874.png" alt="image-20211207233006874"></p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211207230155247.png" alt="image-20211207230155247"></p><p>问：第2次握手传回了ack，为什么还要传syn？</p><p>答：回传 SYN 则是为了建立并确认从服务端到客户端的通信。</p><p>问：为什么一定要三次握手？</p><p>答：因为第一次握手客户端什么确认不了，服务端确认了对方发生正常，自己接收正常；第二次握手客户端确认了自己和对方接收发送都正常；第三次服务端确认了自己发送正常。所以三次握手就是为了确认双方接收和发送功能都正常，缺一不可。</p><h3 id="2-2四次挥手"><a href="#2-2四次挥手" class="headerlink" title="2.2四次挥手"></a>2.2四次挥手</h3><p>四次挥手是为了断开连接</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211207234204710.png" alt="image-20211207234204710"></p><h2 id="3-TCP如何保证可靠传输"><a href="#3-TCP如何保证可靠传输" class="headerlink" title="3. TCP如何保证可靠传输"></a>3. TCP如何保证可靠传输</h2><p>1.首先应用数据被分割成tcp认为最合适发送的数据块</p><p>2.tcp给发送的每个包进行编号，接收方可以通过对数据报编号进行排序，把有序数据传送给应用层</p><p>3.校验和，tcp使用了校验和，目的是为了发现tcp首部和数据在端到端之间发生的任何改动，如果接收方检测到校验和有差错。则丢弃这个报文段和不确认收到此报文段。</p><p>4.tcp的接收端会丢弃收到的重复数据</p><p>5.流量控制，tcp使用的流量控制协议是可变大小的滑动窗口协议，tcp连接的一方都有固定大小的缓存空间，接收端只允许发送端发送自己缓冲区能接纳的数据。当接收方来不及处理发送方的数据时，能提示发送方降低发送速率，防止包丢失。</p><p>6.拥塞控制，当网络拥塞时，减少数据的发送。拥塞控制方法有：慢开始，拥塞避免，快重传与快恢复</p><p>7.ARQ协议，每发完一个分组就停止发送，等待对方确认，在收到确认后再发下一个分组。</p><p>8.超时重传，tcp发出一个报文段后，启动一个定时器，等待确认接收端收到这个报文段，如果不能及时收到确认，将重发这个报文段。</p><h2 id="4-访问一个网站页面时，显示主页的过程"><a href="#4-访问一个网站页面时，显示主页的过程" class="headerlink" title="4. 访问一个网站页面时，显示主页的过程"></a>4. 访问一个网站页面时，显示主页的过程</h2><ol><li>DNS 解析</li><li>TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-11/url%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%87%E7%A8%8B.jpg" alt="img"></p><h2 id="5-状态码"><a href="#5-状态码" class="headerlink" title="5. 状态码"></a>5. 状态码</h2><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019/7/%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="状态码"></p><h2 id="6-HTTP长连接和短连接"><a href="#6-HTTP长连接和短连接" class="headerlink" title="6. HTTP长连接和短连接"></a>6. HTTP长连接和短连接</h2><p>在HTTP/1.0中默认使用短连接，也就是说，客户端和服务端每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。</p><p>从HTTP/1.1开始，默认使用长连接，（在响应头加入：Connection：keep-alive）当一个网页打开完成后，客户端与服务端之间用于传输HTTP数据的TCP链接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。</p><h2 id="7-HTTP是不保存状态的协议，如何保存用户状态呢"><a href="#7-HTTP是不保存状态的协议，如何保存用户状态呢" class="headerlink" title="7. HTTP是不保存状态的协议，如何保存用户状态呢"></a>7. HTTP是不保存状态的协议，如何保存用户状态呢</h2><p>HTTP是无状态协议，服务端给特定的用户创建特定的Session之后就可以表示这个用户的并且跟踪这个用户了。</p><p>Session机制的主要作用就是通过服务端记录用户的状态。</p><p>保存Session的方法</p><p>实现Session跟踪是通过在Cookie中附加一个Session ID的方式。如果Cookie被禁用，就利用url重写把Session ID直接附加在url后面。</p><h2 id="8-Cookie和Session的作用"><a href="#8-Cookie和Session的作用" class="headerlink" title="8.Cookie和Session的作用"></a>8.Cookie和Session的作用</h2><p>Cookie 一般用来保存用户信息，Session 主要是通过服务端记录用户的状态。</p><p>Cookie 数据保存在客户端（浏览器端），Session数据保存在服务器端。</p><h2 id="9-URI和RIL区别"><a href="#9-URI和RIL区别" class="headerlink" title="9.URI和RIL区别"></a>9.URI和RIL区别</h2><p>URI是统一资源标志符，可以唯一标识一个资源</p><p>URL是统一资源定位符，可以提供该资源的路径，是一种具体的URI，即既可以标识一个资源还指明了该资源位置。</p><p>URI像身份证，URL就是身份证上的家庭住址。</p><h2 id="10-HTTP和HTTPS的区别"><a href="#10-HTTP和HTTPS的区别" class="headerlink" title="10.HTTP和HTTPS的区别"></a>10.HTTP和HTTPS的区别</h2><p>端口：HTTP的url以”http://“开始且默认使用80端口，而HTTPS的url是以”https://“开始且默认端口号是443。</p><p>安全性和资源消耗上：HTTP协议运行在TCP上，所有传输的内容是明文，客户端和服务端都无法校验对方身份。</p><p>而HTTPS是运行在SSL/TLS上的HTTP协议，SSL/TLS运行在TCP上，所有传输内容都经过了加密。</p><p>所以HTTP没有HTTPS安全，但是HTTPS会耗费更多的服务器资源。    </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/12/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p>CPU中的告诉缓存有很多，大多都是为例解决CPU的处理速度和内存处理速度不对等的问题。</p><p>还可以把内存可以看作外存的高速缓存，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。</p><p>比如，使用redis缓存就是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。</p><p>命中率，要访问的数据有多少能直接在缓存中直接找到。命中率高就表明缓存设计的比较合理，从而系统处理速度就相对会快。</p><p>手写操作系统—从零实现一个操作系统内核</p><p><a href="https://mp.weixin.qq.com/s/SWZra4_3F0V8Z35j0KVkpA">https://mp.weixin.qq.com/s/SWZra4_3F0V8Z35j0KVkpA</a></p><h1 id="1操作系统基础"><a href="#1操作系统基础" class="headerlink" title="1操作系统基础"></a>1操作系统基础</h1><h2 id="1-1什么是操作系统"><a href="#1-1什么是操作系统" class="headerlink" title="1.1什么是操作系统"></a>1.1什么是操作系统</h2><p>​        操作系统是管理计算机硬件好软件资源的程序，本质是一个运行在计算机上的软件程序，操作系统内核是核心部分，负责系统的内存管理，硬件设备管理，文件系统管理及应用程序管理，内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</p><h2 id="1-2-系统调用"><a href="#1-2-系统调用" class="headerlink" title="1.2 系统调用"></a>1.2 系统调用</h2><p>​        根据进程访问资源的特点，我们可以把进程在系统上的运行分为用户态和系统态两个级别，我们运行的应用程序基本都在用户态，而如果我们要调用操作系统提供的系统态级别的子功能，比如：设备管理，文件管理，内存管理，进程控制和通信等，就需要系统调用，即必须通过系统调用的方式向操作系统提出服务请求，并由操作系统代为完成。</p><h1 id="2进程和线程"><a href="#2进程和线程" class="headerlink" title="2进程和线程"></a>2进程和线程</h1><h2 id="2-1进程和线程的区别"><a href="#2-1进程和线程的区别" class="headerlink" title="2.1进程和线程的区别"></a>2.1进程和线程的区别</h2><p>1.定义上，进程是资源分配的最小单位，是程序执行时的一个实例。线程是cpu调度的最小单位，是进程的执行流。</p><img src="https://oscimg.oschina.net/oscnet/up-cd8ac705f6f004c01e0a1312f1599430ba5.png" alt="img" style="zoom: 67%;" /><p>从JVM的角度看进程和线程之间的关系的话，一个进程可以有多个线程，多个线程共享进程的堆和方法区，每个线程有自己的程序计数器，虚拟机栈和本地方法栈。</p><h2 id="2-2进程有哪几种状态"><a href="#2-2进程有哪几种状态" class="headerlink" title="2.2进程有哪几种状态"></a>2.2进程有哪几种状态</h2><p>进程的状态大致分为五种，</p><p>创建状态（new）：进程正在被创建，尚未到就绪状态。</p><p>就绪状态（ready）：进程已处于准备运行的状态，即获得了除处理器外的其他资源，一旦得到分配的时间片就可运行。</p><p>运行状态（running）：进程在处理器上运行。</p><p>阻塞状态（waiting）：也叫等待状态，进程正在等待某一事件而暂停运行，即使处理器空闲该进程也无法运行。</p><p>结束状态（terminated）：进程正在从系统中消失。</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211206161647311.png" alt="image-20211206161647311"></p><h2 id="2-3进程间的通信方式"><a href="#2-3进程间的通信方式" class="headerlink" title="2.3进程间的通信方式"></a>2.3进程间的通信方式</h2><p>1.管道/匿名管道：用于父子进程间或者兄弟进程间</p><p>2.有名管道：为了克服匿名管道无名的缺点，有名管道以磁盘文件的方式存在，实现本机任意两个进程的通信。</p><p>3.信号：比较复杂的一种通信，用于接受进程某个事件已发生。</p><p>4.信号量：是一个计数器，用于多进程对共享数据的访问，意图在于进程间同步。</p><p>5.消息队列：是消息的一个链表，具有特定格式以及优先级，存放在内存并有消息队列标识符标识，可以实现消息的随机查询。</p><p>6.共享内存：多进程可以访问同一块内存空间，不同进程可以看到对方进程中对共享内存中数据的更新。</p><p>7.套接字：主要用于客户端与服务端之间通过网络进行的通信</p><h2 id="2-4进程间的同步方式有哪些"><a href="#2-4进程间的同步方式有哪些" class="headerlink" title="2.4进程间的同步方式有哪些"></a>2.4进程间的同步方式有哪些</h2><p>线程同步是两个或多个共享关键资源的线程的并发执行。</p><p>线程同步的方式主要有：</p><p>1.互斥量，采用互斥对象机制，即只有拥有互斥对象的线程才有访问公共资源的权限。比如java中关键字synchronized和各种lock。</p><p>2.信号量，它允许同一时刻多个线程访问同一资源，但要控制同一时刻访问此资源的最大线程数量。</p><p>3.事件：通过通知操作（wait/notify）的方式来保持多线程同步。</p><h2 id="2-5进程调度的算法"><a href="#2-5进程调度的算法" class="headerlink" title="2.5进程调度的算法"></a>2.5进程调度的算法</h2><p>进程调度算法是为了确定进程的执行顺序以实现最大的cpu利用率。</p><p>1.先到先服务算法（FCFS）：从就绪队列中选择最先进入队列的进程为之分配资源，是它立即执行到结束或者因发生某件事件而被阻塞放弃占用cpu。</p><p>2.短作业优先算法（SJF）：从就绪队列中选择估计运行时间最短的进程位置分配资源。</p><p>3.时间片轮转调度算法（RR）：从就绪队列中选择最先进入队列的进程，分配一个时间段，称作时间片，运行时间结束就重新放入队尾。</p><p>4.优先级调度算法：为每个进程分配一个优先级，优先级高的先执行。</p><p>5.多级反馈队列调度算法：既使高优先级的进程得到相应又可以使短进程迅速完成。</p><h2 id="2-6什么是死锁"><a href="#2-6什么是死锁" class="headerlink" title="2.6什么是死锁"></a>2.6什么是死锁</h2><p>两个或多个进程执行过程中，由于资源有限，而造成阻塞，都处于阻塞状态，若无外力作用，它们将无法推进下去，此时就产生了死锁。这些永远在等待的进程称为死锁进程。</p><h2 id="2-7-产生死锁的条件"><a href="#2-7-产生死锁的条件" class="headerlink" title="2.7 产生死锁的条件"></a>2.7 产生死锁的条件</h2><p>1.互斥：资源处于非共享模式，即依次只有一个进程可以使用。</p><p>2.占有并等待：一个进程至少占有一个资源，并等待另一资源。</p><p>3.非抢占式：资源不能被强占，只有在持有资源的进程完成任务后才释放该资源。</p><p>4.循环等待。</p><h1 id="3-操作系统内存管理基础"><a href="#3-操作系统内存管理基础" class="headerlink" title="3 操作系统内存管理基础"></a>3 操作系统内存管理基础</h1><h2 id="3-1内存管理主要做什么"><a href="#3-1内存管理主要做什么" class="headerlink" title="3.1内存管理主要做什么"></a>3.1内存管理主要做什么</h2><p>操作系统的内存管理主要负责资源的分配与回收，另外地址转换即将逻辑地址转换成物理地址等功能也是内存管理要做的。</p><h2 id="3-2-常见的集中内存管理机制"><a href="#3-2-常见的集中内存管理机制" class="headerlink" title="3.2 常见的集中内存管理机制"></a>3.2 常见的集中内存管理机制</h2><p>内存管理主要分为连续分配管理和非连续分配管理两种方式，连续分配管理方式指一个用户程序分配一个连续的内存空间，如块式管理。非连续分配管理方式允许一个程序使用内存分布在离散或者说不相邻的内存中，如页式管理和段式管理。</p><p>块式管理，将内存分为几个固定大小的块，每个块只包含一个进程。如果程序运行需要内存，操作系统就分配给它一块，如果程序运行只需要很小的内存空间的话，分配的这块内存很大一部分就会被浪费，被浪费的这部分称之为碎片。</p><p>页式管理，将主存分为大小相等且固定的一页一页的形式，页较小，相对于块块式管理划分力度更小，提高了内存利用率，减少了碎片，页式管理通过页表对于逻辑地址和物理地址</p><p>段式管理，将主存分为一段一段的，每一段的空间比页小很多。最重要的是每段都有实际意义，每个段定义了一组逻辑信息，如主程序段，子程序段，数据段及栈段。段式管理通过段表对应逻辑地址和物理地址。</p><p>段页式管理，结合了页式管理和段式管理，将主存先分成若干段，每个段又分成若干页，段与段之间以及段的内部都是离散的。</p><h3 id="3-2-1-逻辑（虚拟）地址和物理地址"><a href="#3-2-1-逻辑（虚拟）地址和物理地址" class="headerlink" title="3.2.1 逻辑（虚拟）地址和物理地址"></a>3.2.1 逻辑（虚拟）地址和物理地址</h3><p>逻辑地址由操作系统决定，我们编程一般只有可能和逻辑地址打交道， 比如c语言中指针存储的数值就可以理解为内存里的一个地址，这个地址就是我们所说的逻辑地址。</p><p>物理地址指的是真实物理内存中的地址，具体以节点来说就是内存地址寄存器中的地址，物理地址是内存单元真正的地址。</p><h3 id="3-2-2-分页机制和分段机制的共同点和区别"><a href="#3-2-2-分页机制和分段机制的共同点和区别" class="headerlink" title="3.2.2 分页机制和分段机制的共同点和区别"></a>3.2.2 分页机制和分段机制的共同点和区别</h3><p>共同点：1）都是为了提高内存利用率，减少内存碎片；</p><p>​                2）页和段都是离散存储的，所以两者都是离散分配内存的方式，但是页和段中内存是连续的。</p><p>区别：1）页的大小是固定的，而段的大小不固定。</p><p>​            2）分页是为了满足操作系统内存管理需求，而段式逻辑信息的单位。在程序中可以体现为代码段，数据段，能更好满足用户的需要。</p><h3 id="3-2-3-多级页表和快表"><a href="#3-2-3-多级页表和快表" class="headerlink" title="3.2.3 多级页表和快表"></a>3.2.3 多级页表和快表</h3><p>为了提高内存空间的性能，提出多级页表，多级页表类似一本书的目录，要想找某个内容，需要先找到某一章，再找某一节。这样有个缺点是，提高了内存空间性能，牺牲了时间性能，因为要多次访问内存。为了弥补损失的时间性能，提出快表，快表相当于一个高速缓冲存储器，存储最近使用过的也对于的页框号，这样cpu需要访问某一页，直接在快表中找，而不用访问内存，从而提升时间性能。</p><h1 id="4-虚拟内存"><a href="#4-虚拟内存" class="headerlink" title="4.虚拟内存"></a>4.虚拟内存</h1><p>在Windows操作系统中虚拟内存是作为内存使用的一部分硬盘空间。因为当电脑中运行的程序占用内存很大时导致内存消耗殆尽。为了解决这一问题，就使用了虚拟内存技术。</p><p>虚拟内存使应用程序认为它拥有连续的可用的内存，即一个连续完整的内存空间，而实际上它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。</p><h2 id="4-1虚拟内存技术实现"><a href="#4-1虚拟内存技术实现" class="headerlink" title="4.1虚拟内存技术实现"></a>4.1虚拟内存技术实现</h2><p>请求分页存储管理</p><p>请求分段存储管理</p><p>请求段页式存储管理</p><p>注意：区别 是否将程序所需的全部地址空间同时装入主存，请求分页存储管理仅装入当前要执行的部分页即可，这也就是请求分页存储管理可以提供虚拟内存的原因。</p><h2 id="4-1-局部性原理"><a href="#4-1-局部性原理" class="headerlink" title="4.1 局部性原理"></a>4.1 局部性原理</h2><p>程序在执行时，往往呈现局部性规律，也就是说在某个较短时间段内，程序执行局限于某一部分，程序访问的存储空间也局限于某个区域。</p><h2 id="4-2-页面置换算法"><a href="#4-2-页面置换算法" class="headerlink" title="4.2 页面置换算法"></a>4.2 页面置换算法</h2><p>最佳页面置换算法（OPT），选择的被淘汰页在最长时间内或者之后永不再被访问的页面</p><p>先进先出页面置换算法（FIFO），选择在内存中驻留时间最长的页面淘汰，即淘汰最先进入内存的页面。</p><p>最久未使用页面置换算法（LRU），选择在最近一段时间内最久不用的页面予以淘汰。</p><h1 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h1><h3 id="1-Linux目录树"><a href="#1-Linux目录树" class="headerlink" title="1.Linux目录树"></a>1.Linux目录树</h3><p><img src="https://snailclimb.gitee.io/javaguide/docs/cs-basics/operating-system/images/Linux%E7%9B%AE%E5%BD%95%E6%A0%91.png" alt="Linux的目录结构"></p><p>/bin 存放二进制可执行文件</p><p>/etc 存放系统管理和配置文件</p><p>/home 存放所有用户文件的根目录</p><p>/usr 存放系统应用程序</p><p>/opt 存放安装包</p><p>/root 超级用户的主目录</p><p>/sbin 存放二进制可执行文件，只有root才可以访问</p><p>/dev 存放设备文件</p><p>/lib 存放和系统运行相关的库文件</p><p>/tmp 存放各种临时文件</p><p>/var 存放运行是需要改变数据的文件</p><h3 id="2-Linux基本命令"><a href="#2-Linux基本命令" class="headerlink" title="2.Linux基本命令"></a>2.Linux基本命令</h3><h4 id="目录切换："><a href="#目录切换：" class="headerlink" title="目录切换："></a>目录切换：</h4><p><strong><code>cd ..（或cd../）</code>：</strong> 切换到上一层目录</p><p><strong><code>cd /</code>：</strong> 切换到系统根目录</p><p><strong><code>cd ~</code>：</strong> 切换到用户主目录</p><p><strong><code>cd -</code>：</strong> 切换到上一个操作所在目录</p><h4 id="目录的操作命令"><a href="#目录的操作命令" class="headerlink" title="目录的操作命令"></a>目录的操作命令</h4><p>**<code>ls</code>**查看当前目录下的所有目录和文件名</p><p><strong><code>ll</code></strong> 等价于 **<code> ls -l</code>**查案当前目录下所有目录和文件的信息</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211207093600132.png" alt="image-20211207093600132"></p><p>​    第一栏 表示文件的属性 可读可写可执行</p><p>​                第一位表示文件类型</p><p>​                第2-4位表示所有者权限</p><p>​                第5-7位表示所属组权限</p><p>​                第8-10位表示其他用户权限</p><p>​    第二栏 表示文件个数，目录的话就是该目录中文件个数</p><p>​    第三栏 表示文件或目录拥有者</p><p>​    第四栏 表示所属的组</p><p>​    第五栏 文件大小</p><p>​    第六栏 最后修改时间</p><p>​    第七栏 文件名</p><p>**<code>mkdir 目录名</code>**——新建目录</p><p><strong><code>rm</code></strong> 删除目录</p><p><strong><code>mv</code></strong> 移动目录</p><p><strong><code> cp -r</code></strong>  递归拷贝</p><p><strong><code>touch </code></strong> 创建文件</p><p><strong><code>tar -zcvf</code></strong> 压缩文件</p><p>​    z    压缩命令</p><p>​    c    打包文件</p><p>​    v    显示运行过程</p><p>​    f    指定文件名</p><p><strong><code>tar -xvf</code></strong> 解压文件</p><p>​    x    解压命令</p><h4 id="修改文件-目录权限"><a href="#修改文件-目录权限" class="headerlink" title="修改文件/目录权限"></a>修改文件/目录权限</h4><p><strong><code>chmod 777 文件名</code></strong> 表示修改文件的权限为所有用户可读可写可执行</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211207095956995.png" alt="image-20211207095956995"></p><h4 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h4><p><strong><code>useradd</code></strong>    添加用户</p><p><strong><code> userdel</code></strong>    删除用户</p><p><strong><code>usermod</code></strong>    修改账号</p><p><strong><code>passwd</code></strong> 用户名    更改或创建用户密码</p><p>用户组类似</p><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><p><strong><code>pwd</code></strong>    显示当前所在位置</p><p><strong><code>sudo + 其他命令</code></strong>  以系统管理员身份执行命令</p><p><strong><code>grep</code></strong>    搜索命令</p><p><strong><code>ifconfig</code></strong> 查看网卡信息</p><p><strong><code>ping</code></strong>    查看与某台机器的连接情况</p><p><strong><code> netstat -an</code></strong> 查看端口使用情况</p><h1 id="了解shell"><a href="#了解shell" class="headerlink" title="了解shell"></a>了解shell</h1><p>echo输出</p><p>使用变量时 用$修饰</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/20/idea%E4%BD%BF%E7%94%A8test%E6%B3%A8%E8%A7%A3/"/>
    <url>/2021/11/20/idea%E4%BD%BF%E7%94%A8test%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>idea使用test注解</p><p>对于要测试的方法下边写@Test</p><p>然后alt+enter,导入junit包</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211120225026094.png" alt="image-20211120225026094"></p><p>然后就可以使用Test注解了</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20211120225100898.png" alt="image-20211120225100898"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表相关题目</title>
    <link href="/2021/11/11/%E9%93%BE%E8%A1%A8%20-%20%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
    <url>/2021/11/11/%E9%93%BE%E8%A1%A8%20-%20%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>1.判断单链表是否存在环</p><p>1）</p><p>a)给每个节点设置一个flag标记位，初始值为false，遍历到一个节点就改为true，如果遍历到下一个节点flag为true，则说明有环。</p><p>b)类似的方法，还可以使用哈希表缓存，以节点ID为键，创建一个HashSet集合，用来存储遍历过的节点，每遍历到一个新节点，就用新节点和HashSet集合当中存储的节点作比较，如果发现HashSet当中存在相同节点ID，则说明链表有环。</p><p>c)再笨一点的方法就是用 set 集合遍历链表，把节点放入set里，每次访问下个节点时，如果set长度不变，则跳出，说明有环。否则set长度+1，继续遍历。</p><p>2）快慢指针</p><p>创建两个指针p和q，同时指向头结点，遍历链表时，p走一步，q走两步，然后比较两个指针指向的节点是否相同，如果相同，则判断出链表有环。</p><p>2.如何找出有环链表的入环点</p><p>基于上面的快慢指针，在快慢指针的第一次相遇点，设置一个指针t1，在链表头设置一个指针t2，t1和t2同时走，每次走一步，当相遇时，指向的节点就是入环点。</p><p>3.如何判断两个单链表是否相交，以及相交点</p><p>对于两个单链表如果相交的话，那么在相交点后的所有节点是两个链表共有的，那么最后一个节点一定相同，所以遍历两个单链表的最后一个节点是否相同就行了，时间复杂度为O(l1+l2)。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>排序 - 八大排序</title>
    <link href="/2021/11/11/%E6%8E%92%E5%BA%8F%20-%20%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/11/11/%E6%8E%92%E5%BA%8F%20-%20%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>一.交换排序</p><p>1.冒泡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> a_EightSorts.changeSort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bubble</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * 思想：将待排序的元素升序排列</span><br><span class="hljs-comment">     *      从头开始进行两两比较，大的交换到后面</span><br><span class="hljs-comment">     *      每一轮都确定一个本轮中最大的元素放在最后，所以每轮比较个数-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;;<br><br>        System.out.println(Arrays.toString(bubble_1(nums)));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] bubble_1(<span class="hljs-keyword">int</span>[] nums)&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nums.length-i-<span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &gt; nums[j+<span class="hljs-number">1</span>])&#123;<br>                    temp = nums[j];<br>                    nums[j] = nums[j+<span class="hljs-number">1</span>];<br>                    nums[j+<span class="hljs-number">1</span>] = temp;<br><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.快排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> a_EightSorts.changeSort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">quick</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 快速排序</span><br><span class="hljs-comment">     * 思想：选取一个基准点，然后将数组分为基准点左边的元素值小于基准点，右边的元素值大于基准点</span><br><span class="hljs-comment">     * 问题：如果数组中有重复元素，会导致交换陷入死循环，怎么解决，例如nums1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">76</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">//        int nums1[] = &#123;49, 38, 65, 97, 23, 22, 76, 1, 5, 8, 2, 0, -1, 22&#125;;</span><br>        System.out.println(Arrays.toString(quick_rec(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] quick_rec(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right) &#123;<br>        <span class="hljs-keyword">int</span> pivot = nums[left];     <span class="hljs-comment">//设置基准点</span><br>        <span class="hljs-keyword">int</span> i = left;   <span class="hljs-comment">//i记录左指针移动到哪儿</span><br>        <span class="hljs-keyword">int</span> j = right;  <span class="hljs-comment">//j记录有指针移动到哪儿</span><br>        <span class="hljs-comment">//左右同时检索的条件是i&lt;j</span><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">while</span> (nums[i] &lt; pivot &amp;&amp; i &lt; j) &#123;   <span class="hljs-comment">//左边元素值小于基准点且满足检索条件时，左指针右移，当找到大于基准点的元素时停止</span><br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (nums[j] &gt; pivot &amp;&amp; j &gt; i) &#123;   <span class="hljs-comment">//右边元素值大于基准点且满足检索条件时，右指针左移，当找到小于基准点的元素时停止</span><br>                j--;<br>            &#125;<br>            <span class="hljs-comment">//将左边大于基准点的元素值与右边小于基准点的元素值交换位置</span><br>            <span class="hljs-keyword">int</span> temp;<br>            temp = nums[i];<br>            nums[i] = nums[j];<br>            nums[j] = temp;<br>        &#125;<br>        <span class="hljs-comment">//递归</span><br>        <span class="hljs-keyword">if</span> (left &lt; i) quick_rec(nums, left, i - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (right &gt; j) quick_rec(nums, j + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二.插入排序</p><p>1.直接插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> a_EightSorts.insertSort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">direcInsert</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 直接插入排序</span><br><span class="hljs-comment">     * 思想：将数组中的元素依次跟前面已经排好序的元素进行比较，如果选择的元素跟比较的元素小，则交换位置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;;<br>        System.out.println(Arrays.toString(DreInsert(nums)));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] DreInsert(<span class="hljs-keyword">int</span>[] nums)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">//选择的元素</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = nums.length-<span class="hljs-number">1</span>; j &gt; i; j--) &#123;   <span class="hljs-comment">//已排好序的元素</span><br>                <span class="hljs-keyword">if</span> (nums[j] &lt; nums[i])&#123;<br>                    <span class="hljs-keyword">int</span> temp;<br>                    temp = nums[i];<br>                    nums[i] = nums[j];<br>                    nums[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.希尔排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> a_EightSorts.insertSort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">shell</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 希尔排序</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">76</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">22</span>&#125;;<br>        System.out.println(Arrays.toString(shellInsert(nums)));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] shellInsert(<span class="hljs-keyword">int</span>[] nums)&#123;<br>        <span class="hljs-keyword">int</span> gap = nums.length;<br>        <span class="hljs-keyword">while</span> (gap != <span class="hljs-number">0</span>)&#123;   <span class="hljs-comment">//控制排序几轮</span><br>            gap = gap/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; gap; i++) &#123;     <span class="hljs-comment">//每轮排序分几组</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; nums.length; j=j+gap) &#123;     <span class="hljs-comment">//每组进行比较,采用直接插入排序</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j+gap; k &lt; nums.length; k=k+gap) &#123;<br>                        <span class="hljs-keyword">if</span> (nums[k] &lt; nums[j])&#123;<br>                            <span class="hljs-keyword">int</span> temp;<br>                            temp = nums[k];<br>                            nums[k] = nums[j];<br>                            nums[j] = temp;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>三.选择排序</p><p>1.简单选择排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> a_EightSorts.selectSort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">simpleSelect</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 简单选择排序</span><br><span class="hljs-comment">     * 思想：从带排序列中找到最小的元素与第一个元素交换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        int nums[] = &#123;5, 8, 6, 3, 9, 2, 1, 7&#125;;</span><br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">76</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br>        System.out.println(Arrays.toString(selectSimple(nums)));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] selectSimple(<span class="hljs-keyword">int</span>[] nums)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> min = nums[i];<br>            <span class="hljs-keyword">int</span> index = i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (min &gt; nums[j])&#123;<br>                    min = nums[j];<br>                    index = j;<br>                &#125;<br>            &#125;<br>            nums[index] = nums[i];<br>            nums[i] = min;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.堆排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> a_EightSorts.selectSort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">heap</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 堆排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        int nums[] = &#123;5, 8, 6, 3, 9, 2, 1, 7&#125;;</span><br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">76</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">//        int nums[] =&#123;76, 1, 5, 8, 2, 0, -1&#125;;</span><br>        System.out.println(Arrays.toString(heapSort(nums)));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     * https://blog.csdn.net/qq_28063811/article/details/93034625</span><br><span class="hljs-comment">     * a.将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</span><br><span class="hljs-comment">     * b.将堆顶元素与末尾元素交换，将最大/小元素&quot;沉&quot;到数组末端;</span><br><span class="hljs-comment">     * c.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化大根堆和之后调整的过程是不一样的</span><br><span class="hljs-comment">     * 调整大根堆的时候，由于大根堆的性质，只需要从堆顶开始调用调整后函数递归调整就行</span><br><span class="hljs-comment">     * 而初始化大根堆时，此时堆不具有大跟对的性质，所以是从最后一个非叶子节点开始调用调整函数递归调整，依次到根节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] heapSort(<span class="hljs-keyword">int</span>[] nums)&#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span> || nums.length == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> nums;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> len = nums.length;  <span class="hljs-comment">//数组长度，也是需要调整的堆的大小</span><br><br><span class="hljs-comment">//        int lastLeaf = len/2-1;</span><br><span class="hljs-comment">//        while (lastLeaf != -1)&#123;</span><br><span class="hljs-comment">//            adjustHeap(nums,lastLeaf,len);</span><br><span class="hljs-comment">//            lastLeaf--;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        buildMaxHeap(nums); <span class="hljs-comment">//初始化大根堆</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span> ; i--) &#123;  <span class="hljs-comment">//堆顶和堆尾需要交换（数组长度-1）次就行</span><br>            <span class="hljs-comment">//i此时是数组最后一个元素下标</span><br>            swap(nums,<span class="hljs-number">0</span>,i);     <span class="hljs-comment">//在大根堆的基础上，将最后一个元素和堆顶元素交换</span><br>            len--;  <span class="hljs-comment">//需要调整的数组长度，也就是需要调整的堆的大小-1</span><br>            adjustHeap(nums,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化大根堆的函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nums 数组也就是堆元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMaxHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> lastLeaf = nums.length/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (lastLeaf != -<span class="hljs-number">1</span>)&#123;<br>            adjustHeap(nums,lastLeaf, nums.length);<br>            lastLeaf--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调整函数（建立在大根堆的性质之上）</span><br><span class="hljs-comment">     * 根据大根堆的性质，从节点i开始递归向下调整，使之以节点i为根的子树是大根堆</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nums 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i 从下标为i的节点开始调整</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len   待调整的数组/堆大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> leftChild = i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> rightChile = i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> largeIndex = i;<br><br>        <span class="hljs-keyword">if</span> (leftChild &lt; len &amp;&amp; nums[leftChild] &gt; nums[largeIndex])&#123;     <span class="hljs-comment">//len指当前需要调整的数组，也即当前需要调整的堆</span><br>            largeIndex = leftChild;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rightChile &lt; len &amp;&amp; nums[rightChile] &gt; nums[largeIndex])&#123;<br>            largeIndex = rightChile;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (largeIndex != i)&#123;<br>            swap(nums,i,largeIndex);<br>            adjustHeap(nums,largeIndex,len);    <span class="hljs-comment">//每调整一个节点，都需要检查以该节点为根的子树是否符合大根堆</span><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *交换函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp  = nums[a];<br>        nums[a] = nums[b];<br>        nums[b] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2021/09/14/%E5%9B%BE/"/>
    <url>/2021/09/14/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>堆</title>
    <link href="/2021/09/14/%E5%A0%86/"/>
    <url>/2021/09/14/%E5%A0%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯</title>
    <link href="/2021/09/14/%E5%9B%9E%E6%BA%AF/"/>
    <url>/2021/09/14/%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2021/09/14/%E9%80%92%E5%BD%92/"/>
    <url>/2021/09/14/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2021/09/14/%E6%A0%91/"/>
    <url>/2021/09/14/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2021/09/14/%E9%98%9F%E5%88%97/"/>
    <url>/2021/09/14/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>jianzhi_042.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_042</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最近请求次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        RecentCounter recentCounter = <span class="hljs-keyword">new</span> RecentCounter();<br>        recentCounter.queue.add(<span class="hljs-number">1</span>);<br>        recentCounter.queue.add(<span class="hljs-number">3</span>);<br>        recentCounter.queue.add(<span class="hljs-number">100</span>);<br>        recentCounter.queue.add(<span class="hljs-number">3002</span>);<br>        System.out.println(recentCounter.ping(<span class="hljs-number">3003</span>));<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：所有元素都加入队列，ping到t时，从队首元素x开始检查是否在[x-t,t]范围内，不在就删除，直到找到第一个在的停止。返回此时的队列大小即可。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecentCounter</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RecentCounter</span><span class="hljs-params">()</span> </span>&#123;<br>            queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ping</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>            queue.add(t);      <span class="hljs-comment">//向队列添加元素</span><br>            <span class="hljs-comment">//当元素小于t-3000的话就表示该元素不在3000毫秒以内</span><br>            <span class="hljs-keyword">while</span> (queue.peek() &lt; t-<span class="hljs-number">3000</span>)&#123;  <span class="hljs-comment">//queue.peek()检索队首元素，但不删除</span><br>                queue.poll();   <span class="hljs-comment">//检索队首元素并删除。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> queue.size();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi_041.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> javax.security.auth.login.CredentialNotFoundException;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_041</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 滑动窗口的平均值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MovingAverage movingAverage = <span class="hljs-keyword">new</span> MovingAverage(<span class="hljs-number">3</span>);<br><br>        System.out.println(movingAverage.next(<span class="hljs-number">1</span>));<br>        System.out.println(movingAverage.next(<span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovingAverage</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">/** Initialize your data structure here. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MovingAverage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>            len = size;<br>            queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (queue.size() != len) &#123;<br>                sum = sum + val;<br>                queue.add(val);<br>                <span class="hljs-keyword">return</span> sum / queue.size();<br>            &#125;<br>            sum = sum-queue.poll()+val;<br>            queue.add(val);<br>            <span class="hljs-keyword">return</span> (sum / queue.size());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>m_950.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.queue;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_950</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按递增顺序显示卡牌</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">17</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.deckRevealedIncreasing(arr)));<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：将模拟过程倒叙思考</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] deckRevealedIncreasing(<span class="hljs-keyword">int</span>[] deck) &#123;<br>            Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>            Arrays.sort(deck);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = deck.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>                <span class="hljs-keyword">if</span> (queue.isEmpty())&#123;<br>                    queue.add(deck[i]);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                queue.add(queue.poll());<br>                queue.add(deck[i]);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = deck.length-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>                deck[j] = queue.poll();<br>            &#125;<br>            <span class="hljs-keyword">return</span> deck;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>m_341.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">//初始化一个队列，注意类型是Integer，因为迭代取数的时候是整型</span><br>    Queue &lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-comment">//深度优先递归遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        dfs(nestedList);<br>    &#125;<br><br>    <span class="hljs-comment">//重写的这两个方法是Java，Iterator接口自带的。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queue.poll();<span class="hljs-comment">//队列不为空时，出队一个整型元素</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> !queue.isEmpty();<span class="hljs-comment">//队列不为空</span><br>    &#125;<br>    <br><span class="hljs-comment">//遍历给定的嵌套列表list，列表的元素类型是NestedInteger</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(List&lt;NestedInteger&gt; list)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(NestedInteger l:list)&#123;<br>            <span class="hljs-keyword">if</span>(l.isInteger())&#123;<span class="hljs-comment">//如果该元素是一个整型就加入队列</span><br>                queue.add(l.getInteger());<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                dfs(l.getList());<span class="hljs-comment">//如果元素是一个嵌套列表就递归进入</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>s_232.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_232</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用栈模拟队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyQueue myQueue = <span class="hljs-keyword">new</span> MyQueue();<br>        myQueue.push(<span class="hljs-number">1</span>);<br>        myQueue.push(<span class="hljs-number">3</span>);<br><br>        System.out.println(myQueue.peek());<br>        System.out.println(myQueue.pop());<br>        System.out.println(myQueue.pop());<br><br>        System.out.println(myQueue.empty());<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：必须用两个栈，栈1用作操作，栈2用作缓冲</span><br><span class="hljs-comment">     * push的时候，直接push入栈1</span><br><span class="hljs-comment">     * pop的时候，栈1元素依次push入栈2留一个元素,然后栈1再pop，栈1pop完，再把栈2的元素依次全部push入栈1</span><br><span class="hljs-comment">     * peek的时候，同样，栈1元素依次push入栈2留一个元素,然后栈1再peek，栈1peek完，再把栈2的元素依次全部push入栈1</span><br><span class="hljs-comment">     * empty的时候，直接判断栈1是否空</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br><br>        <span class="hljs-keyword">private</span> Stack&lt;Object&gt; stack1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">private</span> Stack&lt;Object&gt; stack2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyQueue</span><span class="hljs-params">()</span> </span>&#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>            stack1.push(x);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">while</span> (stack1.size()!=<span class="hljs-number">1</span>)&#123;<br>                stack2.push(stack1.pop());<br>            &#125;<br>            <span class="hljs-keyword">int</span> temp = (<span class="hljs-keyword">int</span>)stack1.pop();<br>            <span class="hljs-keyword">while</span> (!stack2.empty())&#123;<br>                stack1.push(stack2.pop());<br>            &#125;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">while</span> (stack1.size()!=<span class="hljs-number">1</span>)&#123;<br>                stack2.push(stack1.pop());<br>            &#125;<br>            <span class="hljs-keyword">int</span> temp = (<span class="hljs-keyword">int</span>) stack1.peek();<br>            <span class="hljs-keyword">while</span> (!stack2.empty())&#123;<br>                stack1.push(stack2.pop());<br>            &#125;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> stack1.empty();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>s_225.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_225</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用队列模拟栈</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyStack myStack = <span class="hljs-keyword">new</span> MyStack();<br>        myStack.push(<span class="hljs-number">1</span>);<br>        myStack.push(<span class="hljs-number">3</span>);<br><br>        System.out.println(myStack.top());<br>        System.out.println(myStack.pop());<br>        System.out.println(myStack.pop());<br>        System.out.println(myStack.empty());<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> </span>&#123;<br><br>        Queue&lt;Object&gt; queue1 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        Queue&lt;Object&gt; queue2 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>            queue1.add(x);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">while</span> (queue1.size() != <span class="hljs-number">1</span>)&#123;<br>                queue2.add(queue1.poll());<br>            &#125;<br>            <span class="hljs-keyword">int</span> temp = (<span class="hljs-keyword">int</span>) queue1.poll();<br>            <span class="hljs-keyword">while</span> (!queue2.isEmpty())&#123;<br>                queue1.add(queue2.poll());<br>            &#125;<br>            <span class="hljs-keyword">return</span> temp;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">while</span> (queue1.size() != <span class="hljs-number">1</span>)&#123;<br>                queue2.add(queue1.poll());<br>            &#125;<br>            <span class="hljs-keyword">int</span> temp = (<span class="hljs-keyword">int</span>) queue1.poll();<br>            <span class="hljs-keyword">while</span> (!queue2.isEmpty())&#123;<br>                queue1.add(queue2.poll());<br>            &#125;<br>            queue1.add(temp);<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> queue1.isEmpty();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>s_1700.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1700</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无法吃午餐的学生数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> students[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">int</span> sandwiches[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.countStudents(students,sandwiches));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countStudents</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] students, <span class="hljs-keyword">int</span>[] sandwiches)</span> </span>&#123;<br>            <span class="hljs-comment">//方法一</span><br><span class="hljs-comment">//            Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="hljs-comment">//            Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            for (int i:students)&#123;</span><br><span class="hljs-comment">//                queue.add(i);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            for (int j=sandwiches.length-1;j&gt;=0;j--)&#123;</span><br><span class="hljs-comment">//                stack.push(sandwiches[j]);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            int count = 0;</span><br><span class="hljs-comment">//            while (count != (students.length-1)*students.length/2 &amp;&amp; !stack.isEmpty())&#123;</span><br><span class="hljs-comment">//                if (queue.peek() == stack.peek())&#123;</span><br><span class="hljs-comment">//                    queue.poll();</span><br><span class="hljs-comment">//                    stack.pop();</span><br><span class="hljs-comment">//                &#125;else &#123;</span><br><span class="hljs-comment">//                    queue.add(queue.poll());</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return queue.size();</span><br><br>            <span class="hljs-comment">//方法二</span><br><span class="hljs-comment">//            Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="hljs-comment">//            for (int i:students)&#123;</span><br><span class="hljs-comment">//                queue.add(i);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            for (int i = 0;i&lt; sandwiches.length;i++)&#123;</span><br><span class="hljs-comment">//                int count = 0;</span><br><span class="hljs-comment">//                while (queue.peek() != sandwiches[i] &amp;&amp; count!=queue.size())&#123;</span><br><span class="hljs-comment">//                    queue.add(queue.poll());</span><br><span class="hljs-comment">//                    count++;    //记录队列是否遍历过一轮</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                if (count == queue.size())&#123; //说明遍历完一轮队列后，没有学生走，即可结束</span><br><span class="hljs-comment">//                    return queue.size();</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                else &#123;      //说明学生拿到喜欢的三明治了，该下一个学生适配了</span><br><span class="hljs-comment">//                    queue.poll();</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return queue.size();</span><br><br>            <span class="hljs-comment">//方法三</span><br>            <span class="hljs-keyword">int</span> count[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];   <span class="hljs-comment">//统计爱吃圆形和方形的学生分别有多少</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : students)&#123;<br>                count[i]++;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; sandwiches.length;i++)&#123;   <span class="hljs-comment">//检测栈顶的三明治有没有学生吃，没有的话直接返回剩余学生数量，有吃的话，对应学生-1。</span><br>                <span class="hljs-keyword">if</span> (count[sandwiches[i]] == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">return</span> count[<span class="hljs-number">0</span>]+count[<span class="hljs-number">1</span>];<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    count[sandwiches[i]]--;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi_50.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_50</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第一个只出现一次的字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abaccdeff&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.firstUniqChar(s));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">firstUniqChar</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            HashMap&lt;Character,Integer&gt; hs = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br><span class="hljs-comment">//                if (hs.containsKey(s.charAt(i)))&#123;</span><br><span class="hljs-comment">//                    hs.put(s.charAt(i),hs.get(s.charAt(i))+1);</span><br><span class="hljs-comment">//                &#125;else &#123;</span><br><span class="hljs-comment">//                    hs.put(s.charAt(i),1);</span><br><span class="hljs-comment">//                &#125;</span><br>                hs.put(s.charAt(i),hs.getOrDefault(s.charAt(i),<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>            &#125;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>               <span class="hljs-keyword">if</span> (hs.get(s.charAt(i)) == <span class="hljs-number">1</span>)&#123;<br>                   <span class="hljs-keyword">return</span> s.charAt(i);<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>s_03_06.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.queue;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_03_06</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 动物收容所</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AnimalShelf animalShelf = <span class="hljs-keyword">new</span> AnimalShelf();<br><br>        animalShelf.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br>        animalShelf.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;);<br>        animalShelf.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">0</span>&#125;);<br><br>        System.out.println(Arrays.toString(animalShelf.dequeueAny()));<br>        System.out.println(Arrays.toString(animalShelf.dequeueCat()));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：用linkedlist实现的队列可以用增强for循环通过下标找到并删除下标对应的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalShelf</span> </span>&#123;<br><br>        Queue&lt;<span class="hljs-keyword">int</span> []&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnimalShelf</span><span class="hljs-params">()</span> </span>&#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] animal)</span> </span>&#123;<br>            queue.add(animal);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dequeueAny() &#123;<br>            <span class="hljs-keyword">if</span> (queue.isEmpty())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>            &#125;<br>            <span class="hljs-keyword">return</span> queue.poll();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dequeueDog() &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] animal:queue)&#123;<br>                <span class="hljs-keyword">if</span> (animal[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>                    queue.remove(animal);<br>                    <span class="hljs-keyword">return</span> animal;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dequeueCat() &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] animal:queue)&#123;<br>                <span class="hljs-keyword">if</span> (animal[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>                    queue.remove(animal);<br>                    <span class="hljs-keyword">return</span> animal;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>m641.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思想：采用Arraylist作数据结构，应该不属于内置双端队列库吧</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircularDeque</span> </span>&#123;<br>    List&lt;Integer&gt; douQueue;<br>    <span class="hljs-keyword">int</span> capacity;<span class="hljs-comment">//队列容量</span><br>    <span class="hljs-comment">//定义双端队列的大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCircularDeque</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        douQueue = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(k);<br>        capacity = k;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">insertFront</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (douQueue.size() == capacity)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        douQueue.add(<span class="hljs-number">0</span>,value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">insertLast</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (douQueue.size() == capacity)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> douQueue.add(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteFront</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!douQueue.isEmpty())&#123;<br>            douQueue.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteLast</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!douQueue.isEmpty())&#123;<br>            douQueue.remove(douQueue.size()-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFront</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (douQueue.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> douQueue.get(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRear</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (douQueue.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> douQueue.get(douQueue.size()-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> douQueue.isEmpty();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> capacity == douQueue.size();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>m_1438.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.queue;<br><br><span class="hljs-keyword">import</span> javax.jws.soap.SOAPBinding;<br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1438</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绝对差不超过限制的最长连续子数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> [] nums = &#123;<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>&#125;;<br>       <span class="hljs-keyword">int</span> limit = <span class="hljs-number">8</span>;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.longestSubarray(nums,limit));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：采用队列，将数组中元素依次入队，入队时遍历队列中元素，依次作绝对差进行比较，遇到对绝对差大于阈值的，就停止，比较count和size()-1大小;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestSubarray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;<br>            <span class="hljs-comment">//使用数组</span><br>            <span class="hljs-keyword">int</span> head=<span class="hljs-number">0</span> , tail=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> q = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> lSubarray =<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>                <span class="hljs-keyword">while</span> (head &lt;= tail)&#123;<br>                    <span class="hljs-keyword">if</span> (Math.abs(nums[head] - nums[i]) &gt; limit)&#123;<br>                        q = head + <span class="hljs-number">1</span>;<br>                    &#125;<br>                    head++;<br>                &#125;<br>                <span class="hljs-comment">//减少重复数的比较次数</span><br>                <span class="hljs-keyword">while</span> (i + <span class="hljs-number">1</span> &lt; nums.length &amp;&amp; nums[i] == nums[i + <span class="hljs-number">1</span>]) i++;<br>                <br>                head = q;<br>                tail = i;<br>                lSubarray = Math.max(lSubarray,tail-head+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> lSubarray;<br><br>            <span class="hljs-comment">//使用队列</span><br><span class="hljs-comment">//            int lSubarray=1;</span><br><span class="hljs-comment">//            Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="hljs-comment">//            queue.add(nums[0]);</span><br><span class="hljs-comment">//            for (int i = 1; i &lt; nums.length; i++) &#123;</span><br><span class="hljs-comment">//                int count1 = 0;</span><br><span class="hljs-comment">//                int count2 = 0; //记录队列中最后一个不满足的</span><br><span class="hljs-comment">//                for (Integer num:queue)&#123;</span><br><span class="hljs-comment">//                    count1++;</span><br><span class="hljs-comment">//                    if (Math.abs(num-nums[i]) &gt; limit)&#123;</span><br><span class="hljs-comment">//                        count2 = count1;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                for (int j = 0; j &lt; count2; j++) &#123;</span><br><span class="hljs-comment">//                    queue.poll();</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                queue.add(nums[i]);</span><br><span class="hljs-comment">//                lSubarray = Math.max(lSubarray,queue.size());</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return lSubarray;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2021/09/14/%E6%A0%88/"/>
    <url>/2021/09/14/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>s.1614</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.stack;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1614</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 括号的最大深度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;(((())&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.maxDepth(s));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：遍历字符串入栈，“(”入栈，depth+1，当遇到“)”,元素出栈直到遇到一个“(”</span><br><span class="hljs-comment">     *      遍历完字符串后，用depth-去栈中还剩的“(”</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int maxDepth(String s) &#123;</span><br><span class="hljs-comment">//            if (s == &quot;&quot; || s.length() == 1)&#123;</span><br><span class="hljs-comment">//                return 0;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            char str[] = s.toCharArray();   //将字符串转换为字符串数组</span><br><span class="hljs-comment">//            int depthMax = 0;   //记录&quot;(&quot;最大个数</span><br><span class="hljs-comment">//            int depth = 0;</span><br><span class="hljs-comment">//            Stack&lt;Character&gt; stack = new Stack&lt;&gt;();</span><br><span class="hljs-comment">//            for (Character c:str)&#123;</span><br><span class="hljs-comment">//                if (c ==&#x27;(&#x27;)&#123;</span><br><span class="hljs-comment">//                    stack.push(c);</span><br><span class="hljs-comment">//                    depth++;</span><br><span class="hljs-comment">//                    depthMax = Math.max(depth,depthMax);</span><br><span class="hljs-comment">//                &#125;else if (c == &#x27;)&#x27;)&#123;</span><br><span class="hljs-comment">//                    while (!stack.isEmpty())&#123;</span><br><span class="hljs-comment">//                        if (stack.pop() == &#x27;(&#x27;)&#123;</span><br><span class="hljs-comment">//                            depth--;</span><br><span class="hljs-comment">//                            depthMax = Math.max(depth,depthMax);</span><br><span class="hljs-comment">//                            break;</span><br><span class="hljs-comment">//                        &#125;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;else &#123;</span><br><span class="hljs-comment">//                    stack.push(c);</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            int count = 0;  //记录栈中最后剩几个“)”</span><br><span class="hljs-comment">//            for (Character c:stack)&#123;</span><br><span class="hljs-comment">//                if (c == &#x27;(&#x27;)&#123;</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return depthMax - count;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 由于题目给的是有效字符串，不存在“(((())”这种情况，所以可以直接直接记录栈中“(”最大个数即可</span><br><span class="hljs-comment">      */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            Deque&lt;Character&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>            <span class="hljs-keyword">char</span>[] arr = s.toCharArray();<br>            <span class="hljs-keyword">int</span> len = arr.length;<br>            <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> max=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c: arr)&#123;<br>                <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                    stack.pollLast();<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                    stack.offer(c);<br>                &#125;<br>                max = Math.max(max,stack.size());<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>s.1021</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.stack;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1021</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除最外层的括号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;(()())(())&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.removeOuterParentheses(s));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想:遍历字符串，用open记录开括号的个数，用close记录闭括号的个数，当open==close时，就代表是一个原语</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">removeOuterParentheses</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> open = <span class="hljs-number">0</span>;     <span class="hljs-comment">//记录开括号个数</span><br>            <span class="hljs-keyword">int</span> close = <span class="hljs-number">0</span>;      <span class="hljs-comment">//记录闭括号个数</span><br>            Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            String res = <span class="hljs-string">&quot;&quot;</span>;<br>            String temp = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-comment">//遍历字符串</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(i) == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                    open++;<br>                    stack.push(s.charAt(i));<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    close++;<br>                    stack.push(s.charAt(i));<br>                &#125;<br>                <span class="hljs-keyword">if</span> (open == close)&#123;<br>                    <span class="hljs-keyword">while</span> (!stack.isEmpty())&#123;<br>                        temp = stack.pop() + temp;<br>                    &#125;<br>                    res = res + temp.substring(<span class="hljs-number">1</span>,temp.length()-<span class="hljs-number">1</span>);<br>                    temp = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//最快算法思想</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public String removeOuterParentheses(String S) &#123;</span><br><span class="hljs-comment">//            StringBuilder sb = new StringBuilder();</span><br><span class="hljs-comment">//            int level = 0;</span><br><span class="hljs-comment">//            for (char c : S.toCharArray()) &#123;</span><br><span class="hljs-comment">//                if (c == &#x27;)&#x27;) --level;</span><br><span class="hljs-comment">//                if (level &gt;= 1) sb.append(c);</span><br><span class="hljs-comment">//                if (c == &#x27;(&#x27;) ++level;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return sb.toString();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi038.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> l_Simple.stack;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_jianzhi038</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每日温度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] temperatures = &#123;<span class="hljs-number">73</span>,<span class="hljs-number">74</span>,<span class="hljs-number">75</span>,<span class="hljs-number">71</span>,<span class="hljs-number">69</span>,<span class="hljs-number">72</span>,<span class="hljs-number">76</span>,<span class="hljs-number">73</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.dailyTemperatures(temperatures)));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：遍历数组，对于元素a[i],找a[i]后值大于a[i]的位置下标j，返回j-i</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int[] dailyTemperatures(int[] temperatures) &#123;</span><br><span class="hljs-comment">//            int res[] = new int[temperatures.length];</span><br><span class="hljs-comment">//            for (int i = 0; i &lt; temperatures.length-1; i++) &#123;</span><br><span class="hljs-comment">//                for (int j = i+1; j &lt; temperatures.length; j++) &#123;</span><br><span class="hljs-comment">//                    if (temperatures[i] &lt; temperatures[j])&#123;</span><br><span class="hljs-comment">//                        res[i] = j-i;</span><br><span class="hljs-comment">//                        break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return res;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更快的算法，采用栈,遍历数组，将前一个大于后一个的元素压入栈中，（此时栈中的元素必定是降序的）直到找到前一个小于后一个的元素，</span><br><span class="hljs-comment">     * 然后弹栈，继续比较栈顶元素和当前遍历的节点大小。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dailyTemperatures(<span class="hljs-keyword">int</span>[] temperatures) &#123;<br>            <span class="hljs-keyword">int</span> res [] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[temperatures.length];<br>            Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; temperatures.length; i++) &#123;<br>                <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt; temperatures[i])&#123;<br>                    <span class="hljs-keyword">int</span> index = stack.pop();<br>                    res[index] = i - index;<br>                &#125;<br>                stack.push(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2021/09/14/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2021/09/14/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2021/09/14/%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/09/14/%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>s_1913.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> l_Simple.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1913</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 两个对数之间的最大乘积差</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.maxProductDifference(nums));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：找出最大的两个数，和最小的两个数即可</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxProductDifference</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>            <span class="hljs-comment">//采用冒泡排序，将数组进行排序，然后将排序后数组的最后两个元素乘积减去前两个元素乘积</span><br>            <span class="hljs-keyword">int</span> temp;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nums.length-i-<span class="hljs-number">1</span>; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[j] &gt; nums[j+<span class="hljs-number">1</span>])&#123;<br>                        temp = nums[j];<br>                        nums[j] = nums[j+<span class="hljs-number">1</span>];<br>                        nums[j+<span class="hljs-number">1</span>] = temp;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; nums.length-i-<span class="hljs-number">1</span>; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j])&#123;<br>                        temp = nums[j];<br>                        nums[j] = nums[i];<br>                        nums[i] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> nums[nums.length-<span class="hljs-number">1</span>]*nums[nums.length-<span class="hljs-number">2</span>] - nums[<span class="hljs-number">0</span>]*nums[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>s_2037.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> l_Simple.sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_2037</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使每位学生都有座位的最少移动次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] seats = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">int</span> [] students = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.minMovesToSeat(seats,students));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minMovesToSeat</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] seats, <span class="hljs-keyword">int</span>[] students)</span> </span>&#123;<br>            Arrays.sort(seats);<br>            Arrays.sort(students);<br>            <span class="hljs-keyword">int</span> min = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; seats.length; i++) &#123;<br>                min = min + Math.abs(seats[i]-students[i]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> min;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2021/09/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2021/09/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2021/09/14/%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/09/14/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<hr><p>002.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_002</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 两数相加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br><br>        ListNode() &#123;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode n1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        ListNode n2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        n1.next = n2;<br>        n2.next = n3;<br><br>        ListNode n4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n5 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        n4.next = n5;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode l = solution.twoSum(n1, n4);<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (l.next != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.print(l.val + <span class="hljs-string">&quot;,&quot;</span>);<br>            l = l.next;<br>        &#125;<br>        System.out.println(l.val + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思路：</span><br><span class="hljs-comment">     * 任意某一链表不为空时，两数相加得sumVal</span><br><span class="hljs-comment">     * remainder表示余数，rem=sumVal%10，表示两个位数相加，个位数存入链表</span><br><span class="hljs-comment">     * carry表示进位，car=sumVal/10，说明有进位，加入后续</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">twoSum</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>            ListNode root = <span class="hljs-keyword">new</span> ListNode();     <span class="hljs-comment">//结果链表头结点</span><br>            ListNode curse = root;  <span class="hljs-comment">//游标</span><br>            <span class="hljs-keyword">int</span> sumVal;<br>            <span class="hljs-keyword">int</span> rem;<br>            <span class="hljs-keyword">int</span> car = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span> || car != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">int</span> l1val = l1 != <span class="hljs-keyword">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">int</span> l2val = l2 != <span class="hljs-keyword">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>                sumVal = l1val + l2val + car;<br>                rem = sumVal % <span class="hljs-number">10</span>;<br>                car = sumVal / <span class="hljs-number">10</span>;<br>                ListNode remNode = <span class="hljs-keyword">new</span> ListNode(rem);<br>                curse.next = remNode;<br>                curse = remNode;<br><br>                <span class="hljs-keyword">if</span> (l1!= <span class="hljs-keyword">null</span>) l1 = l1.next;<br>                <span class="hljs-keyword">if</span> (l2!= <span class="hljs-keyword">null</span>) l2 = l2.next;    <span class="hljs-comment">//必须加判断，因为如果当前l2为空，l1不为空，进入下一次循环时，由于上一步l2已经为空，如果不加判断，正常走l2还要后移，则一定报错。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> root.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>019.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_19</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除链表的倒数第 N 个结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>);<br>        ListNode l4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        l1.next = l2;<br>        l2.next = l3;<br>        l3.next = l4;<br><br><span class="hljs-comment">//        Solution solution = new Solution();</span><br><span class="hljs-comment">//        solution.removeNthFromEnd(l1,2);</span><br><br>        Solution2 solution2 = <span class="hljs-keyword">new</span> Solution2();<br>        solution2.removeNthFromEnd(l1,<span class="hljs-number">2</span>);<br><br>        ListNode head = l1;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(head.val);<br>            head = head.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：1)如果删除的是头节点，则head=head.next,return head</span><br><span class="hljs-comment">     *      2)其他情况，找到第k-n个节点node，node.next = node.next.next</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            <span class="hljs-comment">//求链表长度</span><br>            <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>            ListNode temp1 = head;<br>            <span class="hljs-keyword">while</span> (temp1 != <span class="hljs-keyword">null</span>)&#123;<br>                temp1 = temp1.next;<br>                len++;<br>            &#125;<br>            <span class="hljs-comment">//删除头节点</span><br>            <span class="hljs-keyword">if</span>(len == n)&#123;<br>                head = head.next;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-comment">//找第k-n个节点</span><br>            ListNode temp2 = head;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (count != len-n)&#123;<br>                temp2 = temp2.next;<br>                count++;<br>            &#125;<br>            temp2.next = temp2.next.next;<br><br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想2：进阶，扫描一次，用两个指针，一个先走n下，然后两个一起走</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            ListNode q = head;<br>            ListNode p = head;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//快指针先走n步</span><br>            <span class="hljs-keyword">while</span> (count != n)&#123;<br>                q = q.next;<br>                count++;<br>            &#125;<br>            <span class="hljs-comment">//如果删除的是头节点</span><br>            <span class="hljs-keyword">if</span> (q == <span class="hljs-keyword">null</span>)&#123;<br>                head = head.next;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-comment">//快慢指针一起走</span><br>            <span class="hljs-keyword">while</span> (q.next!= <span class="hljs-keyword">null</span>)&#123;<br>                q = q.next;<br>                p = p.next;<br>            &#125;<br>            <span class="hljs-comment">//删除待删节点</span><br>            p.next = p.next.next;<br><br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>0203.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_0203</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除中间节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>);<br>        ListNode l4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        l1.next = l2;<br>        l2.next = l3;<br>        l3.next = l4;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        solution.deleteNode(l2);<br>        ListNode head = l1;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(head.val);<br>            head = head.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想:将要删除的这个节点node变成下一个节点，然后node.next = node.next.next</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode node)</span> </span>&#123;<br>            node.val = node.next.val;<br>            node.next = node.next.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi25.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> midle.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> jianzhi25 &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并两个有序链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>);<br>        ListNode l4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        l1.<span class="hljs-keyword">next</span> = l2;<br>        l3.<span class="hljs-keyword">next</span> = l4;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode h = solution.mergeTwoLists(l1,l3);<br>        <span class="hljs-keyword">while</span> (h!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(h.val);<br>            h=h.<span class="hljs-keyword">next</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> ListNode &#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode <span class="hljs-keyword">next</span>;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode <span class="hljs-keyword">next</span>) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">next</span>; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：将两个链表合并到一个新链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> Solution &#123;<br>        <span class="hljs-keyword">public</span> ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;<br>            <span class="hljs-keyword">if</span> (l1 == <span class="hljs-keyword">null</span> &amp;&amp; l2 == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            ListNode ne = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>            ListNode head = ne;<br><span class="hljs-comment">//            ListNode p = l1;</span><br><span class="hljs-comment">//            ListNode q = l2;</span><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> &amp;&amp; l2 != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (l1.val &lt; l2.val)&#123;<br>                    ne.<span class="hljs-keyword">next</span> = l1;<br>                    l1 = l1.<span class="hljs-keyword">next</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    ne.<span class="hljs-keyword">next</span> = l2;<br>                    l2 = l2.<span class="hljs-keyword">next</span>;<br>                &#125;<br>                ne = ne.<span class="hljs-keyword">next</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l1 == <span class="hljs-keyword">null</span>)&#123;<br>                ne.<span class="hljs-keyword">next</span> = l2;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l2 == <span class="hljs-keyword">null</span>)&#123;<br>                ne.<span class="hljs-keyword">next</span> = l1;<br>            &#125;<br>            <span class="hljs-keyword">return</span> head.<span class="hljs-keyword">next</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1669.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 思想：list1,定义两个指针p,q，负责找到删除部分的尾和头，</span><br><span class="hljs-comment">  * list2，定义两个指针m,n，m指向头，n指向尾</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> ListNode mergeInBetween(ListNode list1, <span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b, ListNode list2) &#123;<br>         <span class="hljs-comment">//定义两个指针m,n，m指向list2头，n指向list2尾</span><br>         ListNode m = list2;<br>         ListNode n = m;<br>         <span class="hljs-keyword">while</span> (n.<span class="hljs-keyword">next</span> != <span class="hljs-literal">null</span>)&#123;<br>             n = n.<span class="hljs-keyword">next</span>;<br>         &#125;<br>         <span class="hljs-comment">//定义两个指针p,q，负责找到list1删除部分的尾和头</span><br>         ListNode p = list1;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i&lt;a<span class="hljs-number">-1</span>;i++)&#123;<br>             p = p.<span class="hljs-keyword">next</span>;<br>         &#125;<br>         ListNode q = p;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>;j&lt;b-a+<span class="hljs-number">2</span>;j++)&#123;<br>             q = q.<span class="hljs-keyword">next</span>;<br>         &#125;<br>         p.<span class="hljs-keyword">next</span> = m;<br>         n.<span class="hljs-keyword">next</span> = q;<br><br>         <span class="hljs-keyword">return</span> list1;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>1290.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思想：先求出链表长度，再从头遍历，sum = sum + node.val * 2^[节点下标]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> getDecimalValue(ListNode head) &#123;<br>        ListNode p = head;<br>        ListNode q = p;<br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//求链表长度</span><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">count</span>++;<br>            p = p.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-comment">//转换成二进制</span><br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (q != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (q.val != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">sum</span> = <span class="hljs-keyword">sum</span> + (<span class="hljs-built_in">int</span>)Math.pow(<span class="hljs-number">2</span>,<span class="hljs-keyword">count</span><span class="hljs-number">-1</span>);<br>            &#125;<br>            q = q.<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">count</span>--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">sum</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi22.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.linked;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi22</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 链表中倒数第k个节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode l1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        ListNode l2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">2</span>);<br>        ListNode l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">3</span>);<br>        l1.next=l2;<br>        l2.next=l3;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode k = solution.getKthFromEnd(l1,<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">while</span> (k!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(k.val);<br>            k = k.next;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//定义一个单链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> val;<br>      ListNode next;<br>      ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：定义两个指针p,q，p先走k下，然后p和q一起走直到p.next==null，则q.next就是要找的倒数第k个链表节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            ListNode p = head;<br>            ListNode q = p;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;k-<span class="hljs-number">1</span>;i++)&#123;<br>                p = p.next;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (p.next!=<span class="hljs-keyword">null</span>)&#123;<br>                p = p.next;<br>                q = q.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> q;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jianzhi06.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思想：定义两个指针，h指向头结点，t指向链表尾部节点，使用尾插法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        ListNode h = head;<br>        ListNode t = h;<br><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;    <span class="hljs-comment">//链表长度</span><br>        <span class="hljs-keyword">while</span> (t != <span class="hljs-keyword">null</span>)&#123;<br>            t = t.next;<br>            len++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> res[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br><br>        <span class="hljs-keyword">while</span> (h != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= len-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>                res[i] = h.val;<br>                h = h.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2021/09/14/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2021/09/14/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<hr><p>1689.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1689</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 十-二进制数的最少数目</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String n = <span class="hljs-string">&quot;13654987&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.minPartitions(n));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：找出字符串中，最大ASCLL码的字符，转换成十进制</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minPartitions</span><span class="hljs-params">(String n)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> ((n.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>)&gt;res)&#123;<br>                    res = n.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑指offer-58.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_58</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 左旋转字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.reverseLeftWords(s,k));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：截取字符串s，然后进行拼接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseLeftWords</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            String str = <span class="hljs-string">&quot;&quot;</span>;<br>            str = s.substring(n)+s.substring(<span class="hljs-number">0</span>,n);<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑指offer-85.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.string;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jianzhi_085</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成匹配的括号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">2</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.generateParenthesis(n));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：深度优先遍历</span><br><span class="hljs-comment">     * 剪枝条件为：左括号个数大于n，右括号个数小于左括号个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            List&lt;String&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>            dfs(n,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,res);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> open,<span class="hljs-keyword">int</span> close,String path,List res)</span></span>&#123;<br><span class="hljs-comment">//            if (open&gt;n || close&gt;open) return;</span><br><span class="hljs-comment">//            if (path.length() == 2*n)&#123;</span><br><span class="hljs-comment">//                res.add(path);</span><br><span class="hljs-comment">//                return;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            dfs(n,open+1,close,path+&quot;(&quot;,res);</span><br><span class="hljs-comment">//            dfs(n,open,close+1,path+&quot;)&quot;,res);</span><br><br>            <span class="hljs-keyword">if</span> (path.length() == <span class="hljs-number">2</span>*n)&#123;<br>                res.add(path);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (open&lt;n)<br>            dfs(n,open+<span class="hljs-number">1</span>,close,path+<span class="hljs-string">&quot;(&quot;</span>,res);<br>            <span class="hljs-keyword">if</span> (close&lt;open)<br>            dfs(n,open,close+<span class="hljs-number">1</span>,path+<span class="hljs-string">&quot;)&quot;</span>,res);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>003.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.string;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_003</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcab&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.lengthOfLongestSubstring(s));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想1：</span><br><span class="hljs-comment">     * 1.用index表示开始遍历的字符串字符元素下标，从头遍历，将得到的字符加入HashSet。</span><br><span class="hljs-comment">     * 2.当出现集合中的字符时，记录不同字符数，然后将集合清空，将index+1，再开始遍历。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="hljs-comment">//            HashSet&lt;Character&gt; hs = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">////            char[] cs = s.toCharArray();</span><br><span class="hljs-comment">//            int index = 0;  //记录开始遍历的数组元素下标</span><br><span class="hljs-comment">//            int count = 0;  //无重复字母字符串计数器</span><br><span class="hljs-comment">//            int maxCount = 0;   //记录最大count值</span><br><span class="hljs-comment">//            while (index &lt; s.length()+1)&#123;</span><br><span class="hljs-comment">//                for (int i = index; i &lt; s.length(); i++) &#123;   //遍历字符串</span><br><span class="hljs-comment">//                    if (hs.contains(s.charAt(i))) &#123;</span><br><span class="hljs-comment">//                        count = 0;</span><br><span class="hljs-comment">//                        hs.clear();</span><br><span class="hljs-comment">//                        break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    hs.add(s.charAt(i));</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                    if (count &gt; maxCount) &#123;</span><br><span class="hljs-comment">//                        maxCount = count;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                index++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return maxCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想2：滑动窗口</span><br><span class="hljs-comment">     * 1.用hashmap存放字符及对应下标</span><br><span class="hljs-comment">     * 2.left表示左指针，即指向无重复字符串的首位，for循环遍历字符串，i表示无重复字符串的末位</span><br><span class="hljs-comment">     * 3.hashmap中若不包含当前遍历到字符，则加入hashmap中，继续遍历</span><br><span class="hljs-comment">     * 若包含当前遍历到的字符，则left移动到hashmap中该字符对应的下标位置，并将hashmap中该字符的对应下标替换成当前遍历到的字符的下标hm.put(s.charAt(i),i)，</span><br><span class="hljs-comment">     * 然后继续遍历字符串直到结束。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span></span>&#123;<br>            HashMap&lt;Character, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (hm.containsKey(s.charAt(i)))&#123;<br>                    left = Math.max(left,hm.get(s.charAt(i))+<span class="hljs-number">1</span>);<br>                &#125;<br>                hm.put(s.charAt(i),i);  <span class="hljs-comment">//hashmap.put()方法，遇到相同的key时，会替换value</span><br>                max = Math.max(max,i-left+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1108.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.string;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1108</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IP地址无效化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String address = <span class="hljs-string">&quot;255.100.50.0&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        String ip = solution.defangIPaddr(address);<br>        System.out.println(ip);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public String defangIPaddr(String address) &#123;</span><br><span class="hljs-comment">//            String ip = &quot;&quot;;</span><br><span class="hljs-comment">//            String subip[] = address.split(&quot;\\.&quot;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            for (int i =0;i&lt;subip.length-1;i++)&#123;</span><br><span class="hljs-comment">//                ip+=subip[i] + &quot;[.]&quot;;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            ip += subip[subip.length-1];</span><br><span class="hljs-comment">//            return ip;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">defangIPaddr</span><span class="hljs-params">(String address)</span> </span>&#123;<br>            StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;address.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (address.charAt(i) != <span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>                    sb.append(address.charAt(i));<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    sb.append(<span class="hljs-string">&quot;[.]&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(sb.toString());<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1221.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple.string;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1221</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分割平衡字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str = <span class="hljs-string">&quot;RLRRLLRLRL&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.balancedStringSplit(str));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int balancedStringSplit(String s) &#123;</span><br><span class="hljs-comment">//            int balanceCount = 0;</span><br><span class="hljs-comment">//            int rCount = 0;</span><br><span class="hljs-comment">//            int lCount = 0;</span><br><span class="hljs-comment">//            for (int i = 0;i&lt;s.length();i++)&#123;</span><br><span class="hljs-comment">//                if (s.charAt(i) == &#x27;R&#x27;) rCount++;</span><br><span class="hljs-comment">//                if (s.charAt(i) == &#x27;L&#x27;) lCount++;</span><br><span class="hljs-comment">//                if (rCount == lCount) balanceCount++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return balanceCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">balancedStringSplit</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> balanceCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(i) == <span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>                    count++;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    count--;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)&#123;<br>                    balanceCount++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> balanceCount;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>535.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle.string;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_535</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *TinyURL 的加密与解密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String URL =<span class="hljs-string">&quot;https://leetcode.com/problems/design-tinyurl&quot;</span>;<br>        Codec codec = <span class="hljs-keyword">new</span> Codec();<br>        System.out.println(codec.encode(URL));<br><br>        System.out.println(codec.decode(codec.encode(URL)));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思想：hashmap存tinyurl和url，tinyurl对应键，url对应值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String INDEX = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String tinyURL_prefix = <span class="hljs-string">&quot;http://tinyurl.com/&quot;</span>;<br><br>        HashMap&lt;String,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">// Encodes a URL to a shortened URL.</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String longUrl)</span> </span>&#123;<br>            <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">6</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;chars.length;i++)&#123;<br>                chars[i] = INDEX.charAt((<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">62</span>));<span class="hljs-comment">//Math.random() 的范围是[0,1)，(int) 向下取整，(int)Math.random()*62 的取值范围是[0, 61]</span><br>            &#125;<br>            String str_encode = <span class="hljs-keyword">new</span> String(chars);<br>            String tinyURL = tinyURL_prefix + str_encode;<br>            <span class="hljs-comment">//前边两行也可以简写成下边这一行</span><br>            <span class="hljs-comment">// String tinyURL = tinyURL_prefix + new String(chars);</span><br><br>            <span class="hljs-keyword">if</span> (!hm.containsKey(longUrl))&#123;<br>                hm.put(tinyURL,longUrl);<br>            &#125;<br>            <span class="hljs-keyword">return</span> tinyURL;<br>        &#125;<br><br>        <span class="hljs-comment">// Decodes a shortened URL to its original URL.</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">decode</span><span class="hljs-params">(String shortUrl)</span> </span>&#123;<br>            String URL = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (hm.containsKey(shortUrl))&#123;<br>                URL = hm.get(shortUrl);<br>            &#125;<br>            <span class="hljs-keyword">return</span> URL;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2021/09/14/%E6%95%B0%E7%BB%84/"/>
    <url>/2021/09/14/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<hr><p>1929.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1929</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数组串联</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.getConcatenation(nums)));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] getConcatenation(<span class="hljs-keyword">int</span>[] nums) &#123;<br>            <span class="hljs-keyword">int</span> ans[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length * <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>                ans[i] = nums[i];<br>                ans[i+nums.length] = nums[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1920.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s002</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于排列构建数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        <span class="hljs-keyword">int</span> res[] = solution.buildArray(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; res.length;i++)&#123;<br>            System.out.println(res[i]);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] buildArray(<span class="hljs-keyword">int</span>[] nums) &#123;<br>            <span class="hljs-keyword">int</span> n = nums.length;<br>            <span class="hljs-keyword">int</span> ans[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; n;i++)&#123;<br>                ans[i] = nums[nums[i]];<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1480.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s1480</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一维数组的动态和</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.runningSum(nums)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想:暴力双循环，把结果数组的每个位置求一边</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int[] runningSum(int[] nums) &#123;</span><br><span class="hljs-comment">//            int sum[] = new int[nums.length];</span><br><span class="hljs-comment">//            for (int i = 0;i&lt; sum.length;i++)&#123;</span><br><span class="hljs-comment">//                for (int j = 0;j&lt;=i;j++)&#123;</span><br><span class="hljs-comment">//                    sum[i] = sum[i] + nums[j];</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return sum;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：前缀和，结果数组的每个位置i=前一个位置（i-1）+给定数组的i位置之和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] runningSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>            <span class="hljs-keyword">int</span> sum[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>            sum[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;sum.length;i++)&#123;<br>                sum[i] = sum[i-<span class="hljs-number">1</span>]+nums[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1720.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s1720</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解码异或后的数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> encoded[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.decode(encoded,<span class="hljs-number">1</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想，本质是求异或的逆运算</span><br><span class="hljs-comment">     * 发现: 当a^b=c时，a=b^c;</span><br><span class="hljs-comment">     * 因此dc[i] = encoded[i-1]^dc[i-1];</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] decode(<span class="hljs-keyword">int</span>[] encoded, <span class="hljs-keyword">int</span> first) &#123;<br>            <span class="hljs-keyword">int</span> dc[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[encoded.length+<span class="hljs-number">1</span>];<br>            dc[<span class="hljs-number">0</span>] = first;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;dc.length;i++)&#123;<br>                dc[i] = encoded[i-<span class="hljs-number">1</span>]^dc[i-<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> dc;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1521.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1512</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 好数对数目</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.numIdenticalPairs(nums));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：利用hashmap统计每个数组元素出现的次数n，每个元素n*(n-1)/2表示符合条件的好数对，然后求和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIdenticalPairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> ans =<span class="hljs-number">0</span>;<br>            HashMap&lt;Integer, Integer&gt; hs = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num:nums)&#123;<br>                hs.put(num,hs.getOrDefault(num,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//getOrDefault(Object key, V defaultValue)</span><br>                <span class="hljs-comment">//意思就是当Map集合中有这个key时，就使用这个key对应的value值，如果没有就使用默认值defaultValue</span><br>            &#125;<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:hs.entrySet())&#123;<br>                <span class="hljs-keyword">int</span> v = entry.getValue();<br>                ans += v*(v-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1828.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m1828</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 统计一个圆中点的数目</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> points[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;&#125;;<br>        <span class="hljs-keyword">int</span> queries [][] = &#123;&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.countPoints(points,queries)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解题思路：写一个方法求给定的点中，有几个在圆内</span><br><span class="hljs-comment">     * 主要是判断一个点是否在圆内的公式为，求点到圆心的距离是否小于该圆半径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-comment">//        public int[] countPoints(int[][] points, int[][] queries) &#123;</span><br><span class="hljs-comment">//            int cPoint[] = new int[queries.length];</span><br><span class="hljs-comment">//            for (int i = 0;i&lt;cPoint.length;i++)&#123;    //求每个查询包含的点</span><br><span class="hljs-comment">//                for (int j = 0;j&lt;points.length;j++)&#123;    //遍历每个点</span><br><span class="hljs-comment">//                    cPoint[i] = countP(points,queries[i]);</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return cPoint;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        //写一个方法求给定的点中，有几个在圆内</span><br><span class="hljs-comment">//        //或者写一个方法判断给定点是否在圆内</span><br><span class="hljs-comment">//        public int countP(int [][] points,int [] query)&#123;</span><br><span class="hljs-comment">//            int count = 0;</span><br><span class="hljs-comment">//            for (int i = 0;i&lt;points.length;i++)&#123;</span><br><span class="hljs-comment">//                if ((double)Math.sqrt((points[i][0]-query[0])*(points[i][0]-query[0])</span><br><span class="hljs-comment">//                        +(points[i][1]-query[1])*(points[i][1]-query[1]))&lt;=query[2])&#123;</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return count;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] countPoints(<span class="hljs-keyword">int</span>[][] points, <span class="hljs-keyword">int</span>[][] queries) &#123;<br>            <span class="hljs-keyword">int</span> cPoint[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[queries.length];<br>            <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;cPoint.length;i++)&#123;    <span class="hljs-comment">//求每个查询包含的点</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;points.length;j++)&#123;    <span class="hljs-comment">//遍历每个点</span><br>                    <span class="hljs-keyword">if</span> (Math.sqrt((points[j][<span class="hljs-number">0</span>]-queries[i][<span class="hljs-number">0</span>])*(points[j][<span class="hljs-number">0</span>]-queries[i][<span class="hljs-number">0</span>])+(points[j][<span class="hljs-number">1</span>]-queries[i][<span class="hljs-number">1</span>])*(points[j][<span class="hljs-number">1</span>]-queries[i][<span class="hljs-number">1</span>]))&lt;= queries[i][<span class="hljs-number">2</span>])&#123;<br>                        temp++;<br>                    &#125;<br>                &#125;<br>                cPoint[i] = temp;<br>                temp = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> cPoint;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1476.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1476</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子矩形查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>        test.test();<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubrectangleQueries</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rectangle[][];<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SubrectangleQueries</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] rectangle)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.rectangle = rectangle;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateSubrectangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row1, <span class="hljs-keyword">int</span> col1, <span class="hljs-keyword">int</span> row2, <span class="hljs-keyword">int</span> col2, <span class="hljs-keyword">int</span> newValue)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row1; i &lt;= row2; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = col1; j &lt;= col2; j++) &#123;<br>                    rectangle[i][j] = newValue;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> rectangle[row][col];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">int</span> rectangle[][] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>            SubrectangleQueries subrectangleQueries = <span class="hljs-keyword">new</span> SubrectangleQueries(rectangle);<br>            subrectangleQueries.updateSubrectangle(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rectangle.length; i++) &#123;   <span class="hljs-comment">//hang</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; rectangle[i].length; j++) &#123;<br>                    System.out.print(subrectangleQueries.rectangle[i][j]+<span class="hljs-string">&quot;,&quot;</span>);;<br>                &#125;<br>                System.out.println();<br>            &#125;<br>            System.out.println(subrectangleQueries.getValue(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1769.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_1769</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移动所有球到每个盒子所需的最小操作数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String boxes = <span class="hljs-string">&quot;001011&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(Arrays.toString(solution.minOperations(boxes)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] minOperations(String boxes) &#123;<br>            <span class="hljs-keyword">int</span> answer[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[boxes.length()];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; boxes.length(); i++) &#123;<br>                <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; boxes.length(); j++) &#123;<br>                    <span class="hljs-keyword">if</span> (j!=i &amp;&amp; boxes.charAt(j) == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                        sum = sum + Math.abs(j-i);<br>                    &#125;<br>                &#125;<br>                answer[i] = sum;<br>            &#125;<br>            <span class="hljs-keyword">return</span> answer;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1672.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s_1672</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最富有客户的资产总量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> accounts[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;&#125;;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.maximumWealth(accounts));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maximumWealth</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] accounts)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;accounts.length;i++)&#123;<br>                <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j= <span class="hljs-number">0</span>;j&lt;accounts[i].length;j++)&#123;<br>                    temp = temp + accounts[i][j];<br>                &#125;<br>                <span class="hljs-keyword">if</span> (sum &lt; temp)&#123;<br>                    sum = temp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>访问github</title>
    <link href="/2021/09/09/%E8%AE%BF%E9%97%AEgithub/"/>
    <url>/2021/09/09/%E8%AE%BF%E9%97%AEgithub/</url>
    
    <content type="html"><![CDATA[<hr><p>1.<a href="http://github.com.ipaddress.com/">http://github.com.ipaddress.com/</a></p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20210909143720888.png" alt="image-20210909143720888" style="zoom: 67%;" /><p>复制IP</p><p>140.82.113.4 GitHub.com</p><hr><p>2.<a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net</a></p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20210909143922126.png" alt="image-20210909143922126" style="zoom:67%;" /><p>复制IP </p><p>199.232.69.194 github.global.ssl.Fastly.net</p><p>打开我的电脑-windows-System32-drivers-etc-hosts</p><p>将上边IP复制到hosts文件最下边</p><p><img src="C:\Users\DB\AppData\Roaming\Typora\typora-user-images\image-20210909144133269.png" alt="image-20210909144133269"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>leetcode_firstday</title>
    <link href="/2021/09/09/leetcode-day1/"/>
    <url>/2021/09/09/leetcode-day1/</url>
    
    <content type="html"><![CDATA[<p>刷leetcode第一天</p><hr><p>1.两数相加（simple）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Simple;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">s001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nums[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>&#125;;<br>        <span class="hljs-keyword">int</span> target = <span class="hljs-number">9</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        <span class="hljs-keyword">int</span> indexs[] = solution.twoSum(nums,target);<br>        System.out.println(<span class="hljs-string">&quot;[&quot;</span>+indexs[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;,&quot;</span>+indexs[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想：</span><br><span class="hljs-comment">     * 1.采用Hashmap，key存数组元素，value存数组元素对应下标</span><br><span class="hljs-comment">     * 2.遍历给定数组，判断哈希表键的集合中是否包含target-nums[i]，即hs.containsKey(target-nums[i])</span><br><span class="hljs-comment">     * 3.如果为false，说明没找到两数相加得目标值target的数组元素，则将该遍历到的数组元素加入哈希表中</span><br><span class="hljs-comment">     * 4.如果为true，说明找到了，即遍历到的数组元素a[i]和目标值target-a[i]（在哈希表中），将对应的数组下标取出即可。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>            HashMap&lt;Integer, Integer&gt; hs = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> index[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt; nums.length;i++)&#123;<br>                <span class="hljs-keyword">if</span> (hs.containsKey(target-nums[i]))&#123;<br>                    index[<span class="hljs-number">0</span>] = hs.get(target-nums[i]);<br>                    index[<span class="hljs-number">1</span>] = i;<br>                    <span class="hljs-keyword">return</span> index;<br>                &#125;<br>                hs.put(nums[i],i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.链表中两数相加（middle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m001</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br><br>        ListNode() &#123;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>        &#125;<br><br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode n1 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        ListNode n2 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        n1.next = n2;<br>        n2.next = n3;<br><br>        ListNode n4 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">9</span>);<br>        ListNode n5 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">8</span>);<br>        n4.next = n5;<br><br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        ListNode l = solution.twoSum(n1, n4);<br><br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (l.next != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.print(l.val + <span class="hljs-string">&quot;,&quot;</span>);<br>            l = l.next;<br>        &#125;<br>        System.out.println(l.val + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思路：</span><br><span class="hljs-comment">     * 任意某一链表不为空时，两数相加得sumVal</span><br><span class="hljs-comment">     * remainder表示余数，rem=sumVal%10，表示两个位数相加，个位数存入链表</span><br><span class="hljs-comment">     * carry表示进位，car=sumVal/10，说明有进位，加入后续</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">twoSum</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>            ListNode root = <span class="hljs-keyword">new</span> ListNode();     <span class="hljs-comment">//结果链表头结点</span><br>            ListNode curse = root;  <span class="hljs-comment">//游标</span><br>            <span class="hljs-keyword">int</span> sumVal;<br>            <span class="hljs-keyword">int</span> rem;<br>            <span class="hljs-keyword">int</span> car = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span> || car != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">int</span> l1val = l1 != <span class="hljs-keyword">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">int</span> l2val = l2 != <span class="hljs-keyword">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>                sumVal = l1val + l2val + car;<br>                rem = sumVal % <span class="hljs-number">10</span>;<br>                car = sumVal / <span class="hljs-number">10</span>;<br>                ListNode remNode = <span class="hljs-keyword">new</span> ListNode(rem);<br>                curse.next = remNode;<br>                curse = remNode;<br><br>                <span class="hljs-keyword">if</span> (l1!= <span class="hljs-keyword">null</span>) l1 = l1.next;<br>                <span class="hljs-keyword">if</span> (l2!= <span class="hljs-keyword">null</span>) l2 = l2.next;    <span class="hljs-comment">//必须加判断，因为如果当前l2为空，l1不为空，进入下一次循环时，由于上一步l2已经为空，如果不加判断，正常走l2还要后移，则一定报错。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> root.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.计算字符串中最大无重复子字符串长度（middle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> midle;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m002</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;abcab&quot;</span>;<br>        Solution solution = <span class="hljs-keyword">new</span> Solution();<br>        System.out.println(solution.lengthOfLongestSubstring(s));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想1：</span><br><span class="hljs-comment">     * 1.用index表示开始遍历的字符串字符元素下标，从头遍历，将得到的字符加入HashSet。</span><br><span class="hljs-comment">     * 2.当出现集合中的字符时，记录不同字符数，然后将集合清空，将index+1，再开始遍历。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    static class Solution &#123;</span><br><span class="hljs-comment">//        public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="hljs-comment">//            HashSet&lt;Character&gt; hs = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">////            char[] cs = s.toCharArray();</span><br><span class="hljs-comment">//            int index = 0;  //记录开始遍历的数组元素下标</span><br><span class="hljs-comment">//            int count = 0;  //无重复字母字符串计数器</span><br><span class="hljs-comment">//            int maxCount = 0;   //记录最大count值</span><br><span class="hljs-comment">//            while (index &lt; s.length()+1)&#123;</span><br><span class="hljs-comment">//                for (int i = index; i &lt; s.length(); i++) &#123;   //遍历字符串</span><br><span class="hljs-comment">//                    if (hs.contains(s.charAt(i))) &#123;</span><br><span class="hljs-comment">//                        count = 0;</span><br><span class="hljs-comment">//                        hs.clear();</span><br><span class="hljs-comment">//                        break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    hs.add(s.charAt(i));</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                    if (count &gt; maxCount) &#123;</span><br><span class="hljs-comment">//                        maxCount = count;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//                index++;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return maxCount;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法思想2：滑动窗口</span><br><span class="hljs-comment">     * 1.用hashmap存放字符及对应下标</span><br><span class="hljs-comment">     * 2.left表示左指针，即指向无重复字符串的首位，for循环遍历字符串，i表示无重复字符串的末位</span><br><span class="hljs-comment">     * 3.hashmap中若不包含当前遍历到字符，则加入hashmap中，继续遍历</span><br><span class="hljs-comment">     * 若包含当前遍历到的字符，则left移动到hashmap中该字符对应的下标位置，并将hashmap中该字符的对应下标替换成当前遍历到的字符的下标hm.put(s.charAt(i),i)，</span><br><span class="hljs-comment">     * 然后继续遍历字符串直到结束。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span></span>&#123;<br>            HashMap&lt;Character, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>                <span class="hljs-keyword">if</span> (hm.containsKey(s.charAt(i)))&#123;<br>                    left = Math.max(left,hm.get(s.charAt(i))+<span class="hljs-number">1</span>);<br>                &#125;<br>                hm.put(s.charAt(i),i);<span class="hljs-comment">//hashmap.put()方法，遇到相同的key时，会替换value</span><br>                max = Math.max(max,i-left+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
